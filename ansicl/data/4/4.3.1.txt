;;
;;  ANSI Common Lisp 日本語訳
;;  4. 型とクラス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  4.3.1 クラスの紹介
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 4.3.1
@type: text

クラスは、インスタンスと呼ばれる他のオブジェクトの集合の
構造と動作を決定するためのオブジェクトです。

クラスは他のひとつ以上のクラスから構造と動作を継承できます。
クラスが継承する目的で他のクラスを参照しているようなクラスは、
それら各クラスのサブクラスであると言われます。
継承の目的で指定されているクラスは、
継承しているクラスのスーパークラスであると言われます。

クラスは名前を持つことができます。
{class-name:link}関数はクラスオブジェクトを引数に取り、
その名前を返却します。
匿名のクラスの名前は{nil!variable:link}です。
シンボルはクラスの名前になれます。
{find-class:link}関数はシンボルを受け取り、
そのシンボルの名前のクラスを返却します。
もしあるクラスにおいて、
その名前がシンボルであり、
その名前のクラスが、あるクラスの名前を指定しているときは、
そのあるクラスは正しい名前を持っていると言います。
つまり、クラス`C`が正しい名前を持つとは、
`S = (class-name C)`でありかつ`C = (find-class S)`のときです。
注意しなければならないとは、
`(find-class S1) = (find-class S2)`
でありかつ`S1 /= S2`の可能性もあるということです。
もし`C = (find-class S)`であるなら、
`C`は`S`という名前を持ったクラスであると言います。

もしクラス`C2`がクラス`C1`のスーパークラスであると
その定義で明示的に指定されたとき、
クラス`C1`はクラス`C2`の`direct`スーパークラスです。
このような場合、`C2`は`C1`の`direct`サブクラスです。
もし`1 <= i<n`の`Ci+1`が`Ci`の`direct`スーパークラスのようなとき
クラス`C2, ..., Cn-1`という順列が存在するのであれば、
クラス`Cn`はクラス`C1`のスーパークラスです。
このような場合、`C1`は`Cn`のサブクラスです。
クラスは自分自身がスーパークラスでもなければ
サブクラスでもないことを考慮されます。
つまり、`C1`が`C2`のスーパークラスのときは`C1 /= C2`です。
クラス`C`とその全てのスーパークラスを含む集合は、
「`C`とそのスーパークラス」と呼ばれます。

各クラスは{class-precedence-list}を持っており、
それは与えられたクラスとそのスーパークラスの集合の
全体の順序を表すものです。
全体の順序はもっとも特定的なものから
そうでないものの順番のリストで表現されます。
{class-precedence-list}はいろいろなところで使われます。
一般的にはもっとも特定的なクラスが、
継承によって他の特定的ではないクラスの機能を
シャドウするのに使います。
メソッドの選択と`method-combination`の処理は、
もっとも徳敵的なものからそうではないもののメソッドの順番を
{class-precedence-list}から使います。

クラスが定義されたとき、定義フォームに記載される
`direct`スーパークラスの順番が重要になります。
各クラスは、その定義フォームに記載される
`direct`スーパークラスに従ったクラスが含まれるリストである、
{local-precedence-order}を持ちます。

{class-precedence-list}は常に各クラスの{local-precedence-order}を
リストとして含みます。
各{local-precedence-order}の中のクラスは、
同じ順番で{class-precedence-list}の中に現れます。
もし{local-precedence-order}にお互いが含まれていないときは、
{class-precedence-list}は構築することができず、
エラーが発生します。
{class-precedence-list}とそれらの計算は、{4.3.5:ab}で説明されます。

クラスは非循環有向グラフで編成されます。
{t!system-class:link}と{standard-object:link}という名前の
2つの特別なクラスがあります。
{t!system-class:link}というクラスはスーパークラスを持ちません。
これは自分自身を除く全てのクラスのスーパークラスです。
{standard-object:link}というクラスは、
クラス{standard-class:link}のインスタンスであり、
これは自分自身を除くクラス{standard-class:link}のインスタンスである、
全てのクラスのスーパークラスです。

オブジェクトシステムのクラス空間は、型空間と対応があります。
この説明で指定されている多くの標準の型は、
その型として同じ名前を持つ対応したクラスがあります。
いくつかの型は、対応したクラスを持っていません。
型とクラスシステムの等号については、{4.3.7:ab}で説明されています。

クラスはそれ自身がクラスのインスタンスである
オブジェクトによって表現されます。
オブジェクトのクラスのクラスは、
そのオブジェクトのメタクラスという語で表現されます。
誤解が生じてないならば、メタクラスという語は、
それ自身がクラスであるというインスタンスを持つ
クラスを示すときに使われます。
メタクラスは、そのインスタンスであるクラスによって使用される継承の形式と、
それらのクラスのインスタンスの表現を決定します。
オブジェクトシステムはデフォルトのメタクラスである
{standard-class:link}を提供しており、
それは多くのプログラムに適しています。

特に指定された場合を除いて、
全てのクラスは標準で{standard-class:link}クラスのインスタンスであり、
全てのジェネリック関数は標準で
{standard-generic-function:link}クラスのインスタンスであり、
全てのメソッドは{standard-method:link}クラスのインスタンスです。

@index

@end

