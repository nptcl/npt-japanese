;;
;;  ANSI Common Lisp 日本語訳
;;  5. データと制御フロー
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro CASE
;;  Macro CCASE
;;  Macro ECASE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 5.3.case
@name: case
@name: ccase
@name: ecase
@link: otherwise
@type: macro

Macro `CASE`, `CCASE`, `ECASE`


## {syntax}

`case` *keyform* `{`*normal-clause*`}`\* [*otherwise-clause*] => *result\**  
`ccase` *keyplace* `{`*normal-clause*`}`\* => *result\**  
`ecase` *keyform* `{`*normal-clause*`}`\* => *result\**

```
normal-clause ::= (keys form*) 
otherwise-clause ::= ({otherwise | t} form*) 
clause ::= normal-clause | otherwise-clause 
```


## {arguments-and-values}

*keyform* - フォーム。評価され*test-key*を返却します。  
*keyplace* - フォーム。評価されて最初に*test-key*を返却します。  
もしキーにマッチしなかったときは、可能であれば後で{place}としても使われます。  
*test-key* - *keyform*か*keyplace*が評価されることによって返却されるオブジェクト。  
*keys* - オブジェクトのリストの指定子。
{case:link}の場合、シンボル{t!variable:link}と{otherwise:link}は
キー指定子として使用することができません。
キーとしてそれらのシンボルを使用したいときは、
それぞれ`(t)`、`(otherwise)`をかわりに使わなければいけません。  
*form* - {implicit-progn}  
*result* - マッチした*clause*の*form*の返却値


## {description}

これらのマクロは、*test-key*とのマッチによって選択された
*clause*内の*form*のボディを条件付きで実行します。

*keyform*と*keyplace*が評価されて、*test-key*が生成されます。

そのあと各*normal-clause*が順番に考慮されます。
もし*test-key*が*clause*のどれかのキーと同じであれば、
その*clause*内の*form*が{implicit-progn}として評価され、
{case:link}、{ccase:link}、{ecase:link}フォームの返却値として
その多値が返却されます。

これらのマクロは、もし*normal-clause*がマッチしなかったときにだけ、
動作が違っています。
違いを下記に示します。

- {case:link}
  - もしマッチする*normal-clause*が存在せず*otherwise-clause*があるときは、
    自動的に*otherwise-clause*がマッチします。
    その*clause*にある*form*は{implicit-progn}として評価され、
    その*clause*内の*form*は{implicit-progn}として評価され、
    {case:link}フォームの返却値としてその多値が返却されます。
    <br><br>
    もし*otherwise-clause*がないときは、
    {case:link}は{nil!variable:link}を返却します。
    <br><br>

- {ccase:link}
  - もしマッチする*normal-clause*が存在しないときは、
    型{type-error:link}の修正可能なエラーが発生します。
    問題の`datum`は*test-key*であり、
    `expected type`は`(member key1 key2 ...)`と同等の型です。
    {store-value!restart:link} `restart`をエラーの修正に使うことができます。
    <br><br>
    もし{store-value!restart:link} `restart`が起動されたら、
    その引数は新しい*test-key*であり、
    *keyplace*への保存は`(setf keyplace test-key)`のように行われます。
    それから{ccase:link}は最初から始められ、
    各*clause*が新しく評価されます。
    <br><br>
    いずれのケースも成立しない場合、
    *keyplace*のサブフォームは再度評価されるかもしれません。
    <br><br>

- {ecase:link}
  - もしマッチする*normal-clause*が存在しないときは、
    型{type-error:link}の修正不可能なエラーが発生します。
    問題の`datum`は*test-key*であり、
    `expected type`は`(member key1 key2 ...)`と同等の型です。
    <br><br>
    {ccase:link}とは対照的に{ecase:link}の使用者は、
    もし*normal-clause*がマッチしなかったら
    {ecase:link}は戻ってこないという事実に頼っています。
    <br><br>


## {examples}

```lisp
(dolist (k '(1 2 3 :four #\v () t 'other))
   (format t "~S "
      (case k ((1 2) 'clause1)
              (3 'clause2)
              (nil 'no-keys-so-never-seen)
              ((nil) 'nilslot)
              ((:four #\v) 'clause4)
              ((t) 'tslot)
              (otherwise 'others)))) 
>>  CLAUSE1 CLAUSE1 CLAUSE2 CLAUSE4 CLAUSE4 NILSLOT TSLOT OTHERS 
=>  NIL
(defun add-em (x) (apply #'+ (mapcar #'decode x)))
=>  ADD-EM
(defun decode (x)
  (ccase x
    ((i uno) 1)
    ((ii dos) 2)
    ((iii tres) 3)
    ((iv cuatro) 4)))
=>  DECODE
(add-em '(uno iii)) =>  4
(add-em '(uno iiii))
>>  Error: The value of X, IIII, is not I, UNO, II, DOS, III,
>>         TRES, IV, or CUATRO.
>>   1: Supply a value to use instead.
>>   2: Return to Lisp Toplevel.
>>  Debug> :CONTINUE 1
>>  Value to evaluate and use for X: 'IV
=>  5
```


## {side-effects}

デバッガーに入るかもしれません。
もし{store-value!restart:link} `restart`が実行されたとき、
*keyplace*の値は変更されるかもしれません。


## {affected-by}

{ccase:link}と{ecase:link}がエラーを通知したときは、
既存の`handler`と{*debug-io*:link}に影響を及ぼす可能性があります。


## {exceptional-situations}

*normal-clause*にマッチしなかったときは、
{ccase:link}と{ecase:link}は
型{type-error:link}のエラーが発生します。


## {see-also}

{cond:link},
{typecase:link},
{setf:link},
{5.1:ab}


## {notes}

```lisp
(case test-key
  {((key*) form*)}*)
== 
(let ((#1=#:g0001 test-key))
  (cond {((member #1# '(key*)) form*)}*))
```

{ecase:link}と{ccase:link}によって使われる特定のエラーメッセージは、
実装によって変わります。
そんな中で、エラーメッセージの特定の単語の制御が必要なときは、
{case:link}の*otherwise-clause*で
明示的に適切なエラーメッセージを発生させるのが良いでしょう。

@end

