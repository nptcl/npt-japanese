;;
;;  ANSI Common Lisp 日本語訳
;;  14. コンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  System Class LIST
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 14.2.list!system-class
@name: list!system-class
@type: system-class

System Class `LIST`


## {class-precedence-list}

{list!system-class:link},
{sequence:link},
{t!system-class:link}


## {description}

リストは、コンスの連鎖であり、
各コンスの`car`がリストの要素、
各コンスの`cdr`が次の接続のリンクか、
あるいは終端のアトムです。

{proper-list}とは、終端が空のリスト`()`であり、
空のリスト自身が{proper-list}であるという、
コンスの連鎖です。
{dotted-list}とは、終端が空ではなくアトムであるリストです。
{circular-list}とは、どれかのコンスが、
後のコンスの`cdr`に接続されているような
終端がないコンスの連鎖のことです。

{dotted-list}と{circular-list}もまたリストですが、
本仕様では、普通は修飾子がない「リスト」という単語を
{proper-list}という意味として使います。
とはいえ、型{list!system-class:link}に、
{dotted-list}と{circular-list}が含まれるのは間違いありません。

リストの各要素にはコンスがあります。
空リストは要素を持たず、コンスではありません。

型{cons!system-class:link}と{null!system-class:link}は、
型{list!system-class:link}の{exhaustive-partition}です。


## {see-also}

{2.4.1:ab},
{22.1.3.5:ab}

@end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function LIST
;;  Function LIST*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 14.2.list!function
@name: list!function
@name: list*
@type: function

Function `LIST`, `LIST*`


## {syntax}

`list` &rest *objects* => *list*  
`list*` &rest *objects+* => *result*


## {arguments-and-values}

*object* - オブジェクト  
*list* - リスト  
*result* - オブジェクト


## {description}

{list!function:link}は、引数*objects*を含むリストを返却します。

{list*:link}は{list!function:link}と似ていますが、
{list!function:link}の最後の引数は、最後のコンスの`car`になるのに対し、
{list*:link}の最後の引数は、最後のコンスの`cdr`になるのが違っています。
したがって、{list*:link}の呼び出しは、
同じ数の引数の{list!function:link}の呼び出しより、
つねに1つ少ないコンスで生成されます。

もし{list*:link}の最後の要素がリストのときは、
{list*:link}の先行した引数の要素が前の方に追加された、
新たなリストを構築する効果があります。

{list*:link}がただひとつの*object*を受け取った場合、
それがリストかどうかに関わらず、その*object*が返却されます。


## {examples}

```lisp
(list 1) =>  (1)
(list* 1) =>  1
(setq a 1) =>  1
(list a 2) =>  (1 2)
'(a 2) =>  (A 2)
(list 'a 2) =>  (A 2)
(list* a 2) =>  (1 . 2)
(list) =>  NIL ;i.e.,  ()
(setq a '(1 2)) =>  (1 2)
(eq a (list* a)) =>  true
(list 3 4 'a (car '(b . c)) (+ 6 -2)) =>  (3 4 A B 4)
(list* 'a 'b 'c 'd) ==  (cons 'a (cons 'b (cons 'c 'd))) =>  (A B C . D)
(list* 'a 'b 'c '(d e f)) =>  (A B C D E F)
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{cons!function:link}


## {notes}

```lisp
(list* x) ==  x
```

@end

