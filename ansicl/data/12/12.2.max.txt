;;
;;  ANSI Common Lisp 日本語訳
;;  12. 数
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function MAX
;;  Function MIN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 12.2.max
@name: max
@name: min
@type: function

Function `MAX`, `MIN`


## {syntax}

`max` `&rest` *real*+ => *max-real*  
`min` `&rest` *real*+ => *min-real*


## {arguments-and-values}

*real* - 実数  
*max-real*, *min-real* - 実数


## {description}

{max:link}は最も大きい（正の無限大に最も近い）*real*を返却します。
{min:link}は最も小さい（負の無限大に最も近い）*real*を返却します。

{max:link}について、
実装は最も大きい引数を返却するか、
あるいは全ての引数を違う型への変換を伝染させるということを考慮し、
浮動小数への伝染の規則を適用させるかを選択できます。
また、ひとつか複数の引数が{=:link}であるとき、
それらの内の一つが返却値として選択されます。
例えば、*real*が{rational}と{float}の混合であり、
最も大きい引数が{rational}であったとき、
実装はその{rational}か、あるいはその{float}の近似かの
どちらかを生成することを自由にできます。
また、最も大きい引数がある{float}の形式であり、
引数にある{float}の最も大きい浮動小数形式よりも
小さい浮動小数形式であるとき、
実装はその与えられた引数の形式か、
あるいは大きい浮動小数形式に拡張して返却することを自由にできます。
同じような考えを{min:link}に適用できます
（最も大きい引数を最も小さい引数に置き換えて下さい）。


## {examples}

```lisp
(max 3) =>  3 
(min 3) =>  3
(max 6 12) =>  12 
(min 6 12) =>  6
(max -6 -12) =>  -6 
(min -6 -12) =>  -12
(max 1 3 2 -7) =>  3 
(min 1 3 2 -7) =>  -7
(max -2 3 0 7) =>  7 
(min -2 3 0 7) =>  -2
(max 5.0 2) =>  5.0 
(min 5.0 2)
=>  2
OR=>  2.0
 (max 3.0 7 1)
=>  7
OR=>  7.0 
 (min 3.0 7 1)
=>  1
OR=>  1.0
 (max 1.0s0 7.0d0) =>  7.0d0
 (min 1.0s0 7.0d0)
=>  1.0s0
OR=>  1.0d0
 (max 3 1 1.0s0 1.0d0)
=>  3
OR=>  3.0d0
 (min 3 1 1.0s0 1.0d0)
=>  1
OR=>  1.0s0 
OR=>  1.0d0
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

どの*real*も実数でなければ、
型{type-error:link}のエラーを通知するべきです。


## {see-also}

なし。


## {notes}

なし。

@end

