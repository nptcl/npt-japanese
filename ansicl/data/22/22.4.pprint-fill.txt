;;
;;  ANSI Common Lisp 日本語訳
;;  22. プリンター
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function PPRINT-FILL
;;  Function PPRINT-LINEAR
;;  Function PPRINT-TABULAR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 22.4.pprint-fill
@name: pprint-fill
@name: pprint-linear
@name: pprint-tabular
@type: function

Function `PPRINT-FILL`, `PPRINT-LINEAR`, `PPRINT-TABULAR`


## {syntax}

`pprint-fill` *stream* *object* `&optional` *colon-p* *at-sign-p*
 => {nil!variable:link}  
`pprint-linear` *stream* *object* `&optional` *colon-p* *at-sign-p*
 => {nil!variable:link}  
`pprint-tabular` *stream* *object* `&optional` *colon-p* *at-sign-p* *tabsize*
 => {nil!variable:link}


## {arguments-and-values}

*stream* - 出力ストリーム指定子  
*object* - オブジェクト  
*colon-p* - {generalized-boolean}。デフォルトは*true*。  
*at-sign-p* - {generalized-boolean}。デフォルトは{implementation-dependent}。  
*tabsize* - 非負の整数。デフォルトは`16`。


## {description}

{pprint-fill:link}, {pprint-linear:link}, {pprint-tabular:link}の関数は、
*stream*に対してリストをどのように
プリティプリントとして出力するか特定の方法を指定します。
*colon-p*が*true*のときは、
各関数は出力の周りを囲うようにカッコを出力します。
各関数は、*at-sign-p*の引数を無視します。
（両方の引数が、ひとつの引数しか必要ないにもかかわらず含まれるのは、
`~/.../`を経由して使用される関数や、
{set-pprint-dispatch:link}関数によって直接使われるからです）
各関数は省略形を扱い、循環構造を検出し、
共有構造を正しく検出し、
そしてリストではないものが指定されたときは
{write:link}を使用して*object*を印字します。

*object*がリストであり、
{*print-pretty*:link}の値が*false*のときは、
これらの関数は*object*を出力する際に
{22.1.3.5:ab}の定義に従い最小の空白を使用します。
それ以外のときは
（*object*がリストであり、{*print-pretty*:link}の値が*true*のとき）、
次のように出力します。

- 関数{pprint-linear:link}はリストを、
ひとつの行に全てを出力するか、
あるいは各要素を行で区切るかのどちらかです。
- 関数{pprint-fill:link}はリストに対して、
可能な限り一行に多くの要素を出力します。
- 関数{pprint-tabular:link}は{pprint-fill:link}と同じですが、
各要素が列をなして並ぶように印字します。
*tabsize*は列の間隔を`ems`で指定し、
これはある列の前の開始位置から次の列の開始位置までの合計の間隔です。


## {examples}

一行の長さが`25`のときの
下記が評価されたときの出力を示します。

```lisp
(progn (princ "Roads ") 
       (pprint-tabular *standard-output* '(elm main maple center) nil nil 8))
Roads ELM     MAIN
      MAPLE   CENTER
```


## {side-effects}

指定したストリームに出力されます。


## {affected-by}

もし決定できるならば、指定したストリームのカーソルの位置。


## {exceptional-situations}

なし。


## {see-also}

なし。


## {notes}

関数{pprint-tabular:link}は次のように定義できます。

```lisp
(defun pprint-tabular (s list &optional (colon-p t) at-sign-p (tabsize nil))
  (declare (ignore at-sign-p))
  (when (null tabsize) (setq tabsize 16))
  (pprint-logical-block (s list :prefix (if colon-p "(" "")
                                :suffix (if colon-p ")" ""))
    (pprint-exit-if-list-exhausted)
    (loop (write (pprint-pop) :stream s)
          (pprint-exit-if-list-exhausted)
          (write-char #\Space s)
          (pprint-tab :section-relative 0 tabsize s)
          (pprint-newline :fill s))))
```

これは{format:link}を使用して
この関数を定義するには不便であることに注意してください。
なぜならリストの繰り返し内にある`format`の命令`~:T`に
`tabsize`引数を渡す必要があるためです。

@end

