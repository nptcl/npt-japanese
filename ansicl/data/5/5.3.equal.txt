;;
;;  ANSI Common Lisp 日本語訳
;;  5. データと制御フロー
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function EQUAL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 5.3.equal
@name: equal
@type: function

Function `EQUAL`


## {syntax}

`equal` *x* *y* => *generalized-boolean*


## {arguments-and-values}

*x* - オブジェクト  
*y* - オブジェクト  
*generalized-boolean* - {generalized-boolean}


## {description}

もし`x`と`y`が構造的に似たオブジェクト（同一構造）なら*true*を返却します。
オブジェクトは{equal:link}によって下記のように扱われます。

- シンボル、数、文字
  - 2つのオブジェクトが、
    シンボルのときは{eq:link}で、
    数のときは{eql!function:link}で、
    文字のときは{eql!function:link}で比較し、
    等しいときは{equal:link}が*true*です。
    <br><br>

- コンス
  - コンスの{equal:link}は、
    2つの`car`が{equal:link}であり、
    かつ、2つの`cdr`が{equal:link}のときのように、
    再帰的に定義されます。
    <br><br>

- 配列
  - 2つの配列の{equal:link}は、ただ{eq:link}であるかどうかだけですが、
    ただ例外があり、文字列と{bit-vector}は
    各要素を{eql!function:link}によって比較します。
    もし`x`か`y`いずれかが{fill-pointer}をもつときは、
    {equal:link}による検査では、
    {fill-pointer}が要素数を制限します。
    <br><br>

- パス名
  - 2つのパス名の{equal:link}は、
    ただ全ての対応する要素が（ホスト、デバイス、など）等しいかどうか比較します。
    しかし各要素内に現れる文字列の比較において
    大文字と小文字が等しいかどうかは{implementation-dependent}です。
    パス名が{equal:link}で等しいのであれば、
    機能的にも等しくなるようにしなければなりません。
    <br><br>

- その他（構造体、ハッシュテーブル、インスタンス、など）
  - 2つのそれ以外のオブジェクトの{equal:link}は、
    ただ{eq:link}によって比較されます。
    <br><br>

{equal:link}は、上記で明確に指定されたもの以外の
どんなオブジェクトにも降りては行きません。
次の図は、前のリストを要約した情報です。
加えて、図には{equal:link}のふるまいの優先順位を載せており、
上に記載されているものの方が下のものより優先順位は高くなります。

```
型            ふるまい
number        eqlを使用
character     eqlを使用
cons          降りて行く
bit vector    降りて行く
string        降りて行く
pathname      機能的に同等
structure     eqを使用
Other array   eqを使用
hash table    eqを使用
Other object  eqを使用
```

Figure 5-12. {equal:link}のふるまいの要約と優先順位

どのような2つのオブジェクトも、
{eql!function:link}が成り立つなら、
{equal:link}もまた成り立ちます。

{equal:link}は、`x`と`y`が循環しているときは、
おそらく終了に失敗します。


## {examples}

```lisp
(equal 'a 'b) =>  false
(equal 'a 'a) =>  true
(equal 3 3) =>  true
(equal 3 3.0) =>  false
(equal 3.0 3.0) =>  true
(equal #c(3 -4) #c(3 -4)) =>  true
(equal #c(3 -4.0) #c(3 -4)) =>  false
(equal (cons 'a 'b) (cons 'a 'c)) =>  false
(equal (cons 'a 'b) (cons 'a 'b)) =>  true
(equal #\A #\A) =>  true
(equal #\A #\a) =>  false
(equal "Foo" "Foo") =>  true
(equal "Foo" (copy-seq "Foo")) =>  true
(equal "FOO" "foo") =>  false
(equal "This-string" "This-string") =>  true
(equal "This-string" "this-string") =>  false
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{eq:link},
{eql!function:link},
{equalp:link},
{=:link},
{string=:link},
{string-equal:link},
{char=:link},
{char-equal:link},
{tree-equal:link}


## {notes}

オブジェクトの同一性は、
正しいアルゴリズムによって決められる一意性といった考え方はありません。
この同一性の関数が適切に使われる場合というのは、
ただ特定のプログラムで必要になったときの文脈でのみ判断できます。
これらの関数はどんな型の引数でも取れますし、
それらの関数名は非常に一般的に聞こえますが、
{equal:link}と{equalp:link}は全てのアプリケーションにおいて
適切に使えるものではありません。

だいたいの考え方として、2つのオブジェクトが{equal:link}であるとは、
ただ印字されたものが同じ表現であるときのみです。

@end

