;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro WITH-ACCESSORS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.with-accessors
@name: with-accessors
@type: macro

Macro `WITH-ACCESSORS`


## {syntax}

`with-accessors` (*slot-entry\**) *instance-form* *declaration\** *form\**
=> *result\**  
*slot-entry* ::= (*variable-name* *accessor-name*)


## {arguments-and-values}

variable-name - 変数名、評価はされない  
accessor-name - 関数名、評価はされない  
instance-form - フォーム、評価される  
declaration - 宣言式、評価はされない  
forms - フォーム、{implicit-progn}  
results - フォームの返却値


## {description}

*slot-entry*によって指定されたスロットが、
{accessor}を通して変数のように使用できるような
{lexical-environment}環境が作成されます。
マクロ{with-accessors:link}は*slot-entry*で指定された
スロットにアクセスするための適切な{accessor}を呼び出します。
スロットの値を設定するために
{setf:link}と{setq:link}の両方を使用することができます。


## {examples}

```lisp
(defclass thing ()
          ((x :initarg :x :accessor thing-x)
           (y :initarg :y :accessor thing-y)))
=>  #<STANDARD-CLASS THING 250020173>
(defmethod (setf thing-x) :before (new-x (thing thing))
  (format t "~&Changing X from ~D to ~D in ~S.~%"
          (thing-x thing) new-x thing))
(setq thing1 (make-instance 'thing :x 1 :y 2)) =>  #<THING 43135676>
(setq thing2 (make-instance 'thing :x 7 :y 8)) =>  #<THING 43147374>
(with-accessors ((x1 thing-x) (y1 thing-y))
                thing1
  (with-accessors ((x2 thing-x) (y2 thing-y))
                  thing2
    (list (list x1 (thing-x thing1) y1 (thing-y thing1)
                x2 (thing-x thing2) y2 (thing-y thing2))
          (setq x1 (+ y1 x2))
          (list x1 (thing-x thing1) y1 (thing-y thing1)
                x2 (thing-x thing2) y2 (thing-y thing2))
          (setf (thing-x thing2) (list x1))
          (list x1 (thing-x thing1) y1 (thing-y thing1)
                x2 (thing-x thing2) y2 (thing-y thing2)))))
>>  Changing X from 1 to 9 in #<THING 43135676>.
>>  Changing X from 7 to (9) in #<THING 43147374>.
=>  ((1 1 2 2 7 7 8 8)
    9
    (9 9 2 2 7 7 8 8) 
    (9)
    (9 9 2 2 (9) (9) 8 8))
```


## {affected-by}

{defclass:link}


## {exceptional-situations}

もし*accessor-name*がインスタンスの{accessor}の名前ではない場合は、
結果は定義されていません。


## {see-also}

{with-slots:link},
{symbol-macrolet:link}


## {notes}

{with-accessors:link}の下記のフォームについて、

```lisp
(with-accessors (slot-entry1 ... slot-entryn) instance-form form1 ... formk)
```

これは、下記の展開と同等です。

```lisp
(let ((in instance-form))
  (symbol-macrolet (Q1 ... Qn) form1 ... formk))
```

ただし、`Qi`は下記のようになります。

```lisp
(variable-namei () (accessor-namei in))
```

@end

