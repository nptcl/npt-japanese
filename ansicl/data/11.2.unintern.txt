;;
;;  ANSI Common Lisp 日本語訳
;;  11. パッケージ
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function UNINTERN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 11.2.unintern
@name: unintern
@type: function

Function `UNINTERN`


## {syntax}

`unintern` *symbol* `&optional` *package* => *generalized-boolean*


## {arguments-and-values}

*symbol* - シンボル  
*package* - パッケージ指定子。デフォルトは現在のパッケージ。  
*generalized-boolean* - {generalized-boolean}


## {description}

{unintern:link}は、*package*から*symbol*を取り除きます。
もし*symbol*が*package*に存在するとき、
それは*package*から取り除かれ、
*packaeg*の`shadowing`シンボルリストに存在するなら
それも削除されます。
もし*package*が*symbol*のホームパッケージであったときは、
*symbol*はホームパッケージを持たない状態になります。
*symbol*は継承によって*package*からアクセスし続けることができるかもしれません。

{unintern:link}の使用すると、
シンボルが記録されているホームパッケージを持たなくなりますが、
しかし実際にはいくつかのパッケージからはアクセスできます。
Common Lispはこのような病的なケースをチェックしないので、
そのようなシンボルは常に`#:`が先頭に印刷されます。

もし*symbol*が取り除かれたら{unintern:link}は*true*を返却し、
それ以外の場合は{nil!variable:link}を返却します。


## {examples}

```lisp
(in-package "COMMON-LISP-USER") =>  #<PACKAGE "COMMON-LISP-USER">
(setq temps-unpack (intern "UNPACK" (make-package 'temp))) =>  TEMP::UNPACK 
(unintern temps-unpack 'temp) =>  T
(find-symbol "UNPACK" 'temp) =>  NIL, NIL 
temps-unpack =>  #:UNPACK 
```


## {side-effects}

{unintern:link}は、パッケージの一貫したルールが
その変更によって保持されないような方法で、
パッケージシステムの状態を変更します。


## {affected-by}

パッケージシステムの現在の状態。


## {exceptional-situations}

{unintern:link}に`shadowing`シンボルが与えられたとき、
以前`shadowing`によって解決していた名前の衝突が出てきます。
もしパッケージ`A`が、パッケージ`B`と`C`を`use`しており、
`A`には`shadowing`シンボル`x`が、
`B`と`C`にはそれぞれ外部シンボル`x`があるとき、
`A`から`shadowing`シンボル`x`を取り除くような状況で、
もし`b:x`と`c:x`がそれぞれ別物であるときには
名前の衝突が表に出てきます。
このような状況では、{unintern:link}はエラーが発生します。


## {see-also}

{11.1:ab}


## {notes}

なし。

@end

