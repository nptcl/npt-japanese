;;
;;  ANSI Common Lisp 日本語訳
;;  15. 配列
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Accessor BIT
;;  Accessor SBIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 15.2.bit!accessor
@name: bit!accessor
@name: sbit
@type: accessor

Accessor `BIT`, `SBIT`


## {syntax}

`bit` *bit-array* `&rest` *subscripts* => *bit*  
`sbit` *bit-array* `&rest` *subscripts* => *bit*  
(`setf` (`bit` *bit-array* `&rest` *subscripts*) *new-bit*)  
(`setf` (`sbit` *bit-array* `&rest` *subscripts*) *new-bit*)


## {arguments-and-values}

*bit-array* - {bit!accessor:link}はビット配列であり、
{sbit:link}は`simple`なビット配列  
*subscripts* - ビット配列への有効な配列のインデックスのリスト  
*bit* - ビット


## {description}

{bit!accessor:link}と{sbit:link}は、*subscripts*によって指定された
ビット配列の要素にアクセスします。

これらの関数は、要素にアクセスするときに{fill-pointer}を無視します。


## {examples}

```lisp
(bit (setq ba (make-array 8 
                           :element-type 'bit 
                           :initial-element 1))
      3) =>  1
(setf (bit ba 3) 0) =>  0
(bit ba 3) =>  0
(sbit ba 5) =>  1
(setf (sbit ba 5) 1) =>  1
(sbit ba 5) =>  1
```


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{aref:link},
{3.2.1:ab}


## {notes}

{bit!accessor:link}と{sbit:link}は{aref:link}に似ていますが、
*array*がそれぞれビット配列と`simple`のビット配列であることを
要求することが違っています。

{bit!accessor:link}と{sbit:link}は
{char:link}と{schar:link}とは似ておらず、
最初の引数はどんなランクの配列でも許されます。

@end

