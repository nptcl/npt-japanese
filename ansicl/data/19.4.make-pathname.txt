;;
;;  ANSI Common Lisp 日本語訳
;;  19. ファイル名
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function MAKE-PATHNAME
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 19.4.make-pathname
@name: make-pathname
@type: function

Function `MAKE-PATHNAME`


## {syntax}

`make-pathname` `&key` *host* *device* *directory*
 *name* *type* *version* *defaults* *case*
 => *pathname*


## {arguments-and-values}

*host* - 有効な物理パス名のホスト。
標準の動作が複雑なので説明をご確認ください。  
*device* - 有効なパス名のデバイス。
標準の動作が複雑なので説明をご確認ください。  
*directory* - 有効なパス名のディレクトリ。
標準の動作が複雑なので説明をご確認ください。  
*name* - 有効なパス名の名前。
標準の動作が複雑なので説明をご確認ください。  
*type* - 有効なパス名の型。
標準の動作が複雑なので説明をご確認ください。  
*version* - 有効なパス名のバージョン。
標準の動作が複雑なので説明をご確認ください。  
*defaults* - パス名指定子。
デフォルトは、ホストの要素が
{*default-pathname-defaults*:link}の値の
ホストの要素と同じであり、
その他の要素は全て{nil!variable:link}であるパス名。  
*case* - `:common`か`:local`のうちのひとつ。デフォルトは`:local`です。  
*pathname* - パス名


## {description}

指定されたキーワード引数からパス名を構築して返却します。

明示的に*host*, *device*, *directory*, *name*, *type*, *version*が
指定された要素が記入されたあとは、
{merge-pathnames:link}を使用したかのようなマージの規則に従い、
指定されなかった要素に対して
*default*によって指定された標準の要素を埋めていきます。

パス名は適用可能であれば要素に対して正規化されて構築されます。
各要素に対して指定された各引数の説明は{19.2.1:ab}をご確認ください。

もし*case*が指定されたとき、
それは{19.2.2.1.2:ab}の説明のように扱われます。

もしホストの要素が論理ホストか、
論理ホストとして定義された名前の文字列のときは、
結果の*pathname*は論理パス名です。

もし*directory*が文字列のとき、
それはトップレベルのディレクトリ名でなくてはならず、
どんなくぐり文字も含まれてはなりません。
つまり、文字列*str*が指定されたときは、
リストの`(:absolute str)`が指定されたのと同等です。
シンボル`:wild`が指定されたときは、
リストの`(:absolute :wild-inferiors)`か
システムが`:wild-inferiors`をサポートしていないときは
`(:absolute :wild)`が指定されたのと同等です。


## {examples}

```lisp
;; 実装A - この実装はひとつのUnixファイルシステムにアクセスします。
;;  この実装はhostの情報を名前文字列に決して表示しないので、
;;  hostはただひとつになります。
(make-pathname :directory '(:absolute "public" "games")
               :name "chess" :type "db")
=>  #P"/public/games/chess.db" 

;; 実装B - この実装はひとつか複数のVMSファイルシステムにアクセスします。
;;  この実装はhostの情報をローカル干す値ではないときのみ
;;  名前文字列に出力します。それはホスト名とローカルファイル名を
;;  区切るのにダブルコロンが使われます。
(make-pathname :directory '(:absolute "PUBLIC" "GAMES")
               :name "CHESS" :type "DB")
=>  #P"SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 
(make-pathname :host "BOBBY"
               :directory '(:absolute "PUBLIC" "GAMES")
               :name "CHESS" :type "DB")
=>  #P"BOBBY::SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 

;; 実装C - この実装は同じLispイメージから多重のファイルシステムに
;;  同時にアクセスします。この実装は、パス名の名前文字列にある
;;  最初のコロンに先行したテキストがホスト名である慣習があります。
(dolist (case '(:common :local))
  (dolist (host '("MY-LISPM" "MY-VAX" "MY-UNIX"))
    (print (make-pathname :host host :case case
                          :directory '(:absolute "PUBLIC" "GAMES")
                          :name "CHESS" :type "DB"))))
>>  #P"MY-LISPM:>public>games>chess.db"
>>  #P"MY-VAX:SYS$DISK:[PUBLIC.GAMES]CHESS.DB"
>>  #P"MY-UNIX:/public/games/chess.db"
>>  #P"MY-LISPM:>public>games>chess.db" 
>>  #P"MY-VAX:SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 
>>  #P"MY-UNIX:/PUBLIC/GAMES/CHESS.DB" 
=>  NIL
```


## {affected-by}

ファイルシステム。


## {exceptional-situations}

なし。


## {see-also}

{merge-pathnames:link},
{pathname!function:link},
{logical-pathname!function:link},
{20.1:ab},
{19.1.2:ab}


## {notes}

移植可能なプログラムは各要素に`:unspecific`を指定するべきではありません。
{19.2.2.2.3:ab}をご確認ください。

@end

