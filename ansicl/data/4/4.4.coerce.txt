;;
;;  ANSI Common Lisp 日本語訳
;;  4. 型とクラス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function COERCE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 4.4.coerce
@name: coerce
@type: function

Function `COERCE`


## {syntax}

`coerce` *object* *result-type* => *result*


## {arguments-and-values}

*object* - オブジェクト  
*result-type* - 型指定子  
*result* - *result-type*の型のオブジェクト。例外は状況は{12.1.5.3:ab}をご確認ください。


## {description}

*object*を型*result-type*に強制的に変換します。

もし*object*がすでに型*result-type*であったときは、
他の型のオブジェクトを*result-type*に強制することが
一般的に可能であったかどうかに関わらず、
*object*自身が返却されます。

それ以外のときは、*object*は下記のルールに従って
*result-type*の型に強制されます。

- {sequence:link}
  - もし*result-type*が{list!system-class:link}の認識可能なサブタイプであり、
    *object*がシーケンスのときは、
    *result*は*object*と同じ要素を持ったリストです。
	<br><br>
    もし*result-type*が{vector!system-class:link}の認識可能なサブタイプであり、
    *object*がシーケンスのときは、
    *result*は*object*と同じ要素を持った`vector`です。
    もし*result-type*が{specialized}の型のとき、
    *result*は要素の型の{specialized}の部分を格上げした結果の
    {actual-array-element-type}の型を持ちます。
    もし要素の型が指定されていないときは、
    その要素の型はデフォルトの{t!system-class:link}になります。
    実装が要素の型を決定できないときはエラーが発生します。
    <br><br>

- {character!system-class:link}
  - もし*result-type*が{character!system-class:link}であり、
    *object*が文字指定子のときは、
    *result*は引数が示す文字になります。
    <br><br>

- {complex!system-class:link}
  - もし*result-type*が{complex!system-class:link}であり
    *object*が実装のときは、 *result*は実部が*object*、
    虚部が整数の`0`を*object*の型で{coerce:link}したもので構築した
    複素数になります
    （しかし文字実部が`rational`のときは、
    結果もまた複素数ではなく`rational`になります。
    {12.1.5.3:ab}をご確認ください。
    よって例えば`(coerce 3 'complex)`は許されますが、
    返却値は複素数ではなく`3`になります）。
    <br><br>

- {float!system-class:link}
  - もし*result-type*が {float!system-class:link},
    {short-float:link}, {single-float:link},
    {double-float:link}, {long-float:link}のどれかであり
    *object*が実装のときは、
    *result*は、型が*result-type*であり、
    符号が*object*と等しく、
    その浮動小数の型が表現できる精度の大きさが
    *object*と等しいものになります
    （もし*result-type*が{float!system-class:link}で
    *object*が浮動小数ではないときは、
    *result*は`single-float`になります）。
    <br><br>

- {function!system-class:link}
  - もし*result-type*が{function!system-class:link}で、
    *object*が`fbound`の関数名であり、
    その関数名がグローバルなマクロ名でもなければ
    {special-operator}でもないときは、
    *result*は*object*の関数の値です。
    <br><br>
    もし*result-type*が{function!system-class:link}で、
    *object*がラムダ式の場合は、
    *result*は{null-lexical-environment}の
    *object*のクロージャーです。
    <br><br>

- {t!system-class:link}
  - どんな*object*でも型{t!system-class:link}へ強制できます
    このような場合、*object*が単純に返却されます。


## {examples}

```lisp
(coerce '(a b c) 'vector) =>  #(A B C)
(coerce 'a 'character) =>  #\A
(coerce 4.56 'complex) =>  #C(4.56 0.0)
(coerce 4.5s0 'complex) =>  #C(4.5s0 0.0s0)
(coerce 7/2 'complex) =>  7/2
(coerce 0 'short-float) =>  0.0s0
(coerce 3.5L0 'float) =>  3.5L0
(coerce 7/2 'float) =>  3.5
(coerce (cons 1 2) t) =>  (1 . 2)
```

下記の全てのフォームは、エラーが発生します。

```lisp
(coerce '(a b c) '(vector * 4))
(coerce #(a b c) '(vector * 4))
(coerce '(a b c) '(vector * 2))
(coerce #(a b c) '(vector * 2))
(coerce "foo" '(string 2))
(coerce #(#\a #\b #\c) '(string 2))
(coerce '(0 1) '(simple-bit-vector 3))
```


## {affected-by}

なし。


## {exceptional-situations}

もし強制が不可能な時は、
型{type-error:link}のエラーが発生します。

`(coerce x 'nil)`は常に型{type-error:link}のエラーです。

*result-type*が{function!system-class:link}だが、
*object*が`fbound`ではないシンボルであったり、
またはシンボル名がマクロか{special-operator}のときは、
型{type-error:link}のエラーが発生します。

*result-type*で指定された要素数と*object*が違う長さでのときは、
型{type-error:link}のエラーが発生します。


## {see-also}

{rational!system-class:link},
{floor:link},
{char-code:link},
{char-int:link}


## {notes}

浮動小数から`rational`への強制と、
分数から浮動小数への強制は、
丸め問題のため提供されません。

```lisp
(coerce x 't) ==  (identity x) ==  x
```

@end

