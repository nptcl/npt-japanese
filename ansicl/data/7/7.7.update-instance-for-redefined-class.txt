;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Standard Generic Function UPDATE-INSTANCE-FOR-REDEFINED-CLASS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.update-instance-for-redefined-class
@name: update-instance-for-redefined-class
@type: standard-generic-function

Standard Generic Function `UPDATE-INSTANCE-FOR-REDEFINED-CLASS`


## {syntax}

`update-instance-for-redefined-class`
*instance* *add-slots* *discarded-slots* *property-list*
&rest *initargs* &key &allow-other-keys => *result\**


## {method-signatures}

`update-instance-for-redefined-class`
(*instance* {standard-object:link})
*added-slots* *discarded-slots* *property-list* &rest *initargs*


## {arguments-and-values}

*instance* - オブジェクト  
*added-slots* - リスト  
*discarded-slots* - リスト  
*property-list* - リスト  
*initargs* - {initialization-arguments}リスト  
*result* - オブジェクト


## {description}

ジェネリック関数{update-instance-for-redefined-class:link}は、
プログラマーによって呼び出されることを意図していません。
プログラマーはこの関数のメソッドを作成できます。
関数{update-instance-for-redefined-class:link}は、
関数{make-instances-obsolete:link}によって
有効化される仕組みによって呼び出されます。

システムが提供する{update-instance-for-redefined-class:link}の
プライマリメソッドは、*initargs*の有効性を確認し、
もし*initargs*に有効として宣言されていないものが与えられていた場合は
エラーが通知されます。
このメソッドは、*initargs*に対応する値でスロットを初期化します。
そして新たに追加されたスロット*added-slots*には
`:initform`フォーム対応した値で初期化します。
このような動作は、ジェネリック関数{shared-initialize:link}を
次のような引数で呼び出すことで行います。
引数は、*instance*、
*instance*に新しく追加されたスロットの名前のリスト*added-slots*、
そして受け取った*initargs*です。
新しく追加されたスロット*added-slots*とは、
以前のクラスに同じ名前のスロットが存在しない局所スロットのことです。

{make-instances-obsolete:link}が起動されるときか、
クラスが再定義されて*instance*が更新されるときは、
元のインスタンスの全ての削除されるスロット*discarded-slots*とその値が、
スロットの名前と値とともに取り出され*property-list*が作成されます。
*instance*の構造は、現在のクラスの定義に合うように変換されます。
{update-instance-for-redefined-class:link}の引数は、
変換された*instance*、
インスタンスへ追加されたスロットのリスト*added-slots*、
インスタンスから削除されるスロットのリスト*discarded-slots*、
削除されるスロットで値を持っているの
スロットの名前と値が含まれるリスト*property-list*です。
削除されるスロットのリストは、古いクラスでは局所スロットだったものから、
新しいクラスでは共有スロットになったものが含まれます。


## {examples}

```lisp
(defclass position () ())
 
(defclass x-y-position (position)
    ((x :initform 0 :accessor position-x)
     (y :initform 0 :accessor position-y)))
 
;;; 極座標は直交座標よりも多く使用されることが判明したため、
;;; 表現を変更し、いくつかの新しいaccessorメソッドを追加しました。
 
(defmethod update-instance-for-redefined-class :before
   ((pos x-y-position) added deleted plist &key)
  ;; x-y座標を極座標に変換し新しいスロットに保存します
  (let ((x (getf plist 'x))
        (y (getf plist 'y)))
    (setf (position-rho pos) (sqrt (+ (* x x) (* y y)))
          (position-theta pos) (atan y x))))
  
(defclass x-y-position (position)
    ((rho :initform 0 :accessor position-rho)
     (theta :initform 0 :accessor position-theta)))
  
;;; 全ての古いx-y-positionインスタンスは、
;;; 自動的にアップデートされるでしょう。

;;; 新しい表現は、旧来の表現と同じような見た目が与えられています。

(defmethod position-x ((pos x-y-position))  
   (with-slots (rho theta) pos (* rho (cos theta))))

(defmethod (setf position-x) (new-x (pos x-y-position))
   (with-slots (rho theta) pos
     (let ((y (position-y pos)))
       (setq rho (sqrt (+ (* new-x new-x) (* y y)))
             theta (atan y new-x))
       new-x)))

(defmethod position-y ((pos x-y-position))
   (with-slots (rho theta) pos (* rho (sin theta))))

(defmethod (setf position-y) (new-y (pos x-y-position))
   (with-slots (rho theta) pos
     (let ((x (position-x pos)))
       (setq rho (sqrt (+ (* x x) (* new-y new-y)))
             theta (atan new-y x))
       new-y)))
```


## {affected-by}

なし。


## {exceptional-situations}

システムが提供する{update-instance-for-redefined-class:link}の
プライマリメソッドは、
*initargs*に有効として宣言されていないものが与えられていた場合は
エラーが通知されます。


## {see-also}

{make-instances-obsolete:link},
{shared-initialize:link},
{4.3.6:ab},
{7.1.4:ab},
{7.1.2:ab}


## {notes}

*initargs*は、{defclass:link}の`:initarg`引数によって、
あるいは{update-instance-for-redefined-class:link}か
{shared-initialize:link}のメソッドの宣言によって、
有効であると宣言されます。
{update-instance-for-redefined-class:link}か
{shared-initialize:link}の各メソッドの宣言のラムダリストにある、
各キーワードパラメーター指定子のキーワード名は、
それらのメソッドが適用されるすべてのクラスに対して、
有効な{initialization-arguments}の名前として宣言されます。

@end

