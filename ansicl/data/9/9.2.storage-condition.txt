;;
;;  ANSI Common Lisp 日本語訳
;;  9. コンディション
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Condition Type STORAGE-CONDITION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 9.2.storage-condition
@name: storage-condition
@type: condition-type

Condition Type `STORAGE-CONDITION`


## {class-precedence-list}

{storage-condition:link},
{serious-condition:link},
{condition:link},
{t!system-class:link}


## {description}

型{storage-condition:link}は、
メモリ管理の問題に関連するものであったり、
{confirming-program}の意味的なエラーではなく
{implementation-dependent}の限界の可能性であったり、
捕捉されなかった時にデバッガーへ入るという典型的なものであったりといった、
深刻なコンディションの内容を含みます。
実装の詳細に依存しており、
これらのものはスタックオーバーフローや、
メモリ領域のオーバーフロー、 記憶領域の超過などの問題を含みます。


## {notes}

いくつかのCommon Lispの操作はオブジェクトの生成の定義によって
{storage-condition:link}を通知するかもしれませんが、
オブジェクトの生成が定義されていない操作であっても
とにかく何かの生成が発生する可能性があり、
そのような時に{storage-condition:link}を通知するかどうかは指定されていません。
同じように評価器自身が何らかのオブジェクトを作成し
{storage-condition:link}を通知するかもしれません。
（このようなオブジェクトの生成は当然非効率と
考えるのが自然かもしれませんが、
それ自体も{implementation-dependent}です。）
一般的に、ストレージの確保をどのようにして行うかという質問は
全体的に{implementation-dependent}で行われます。
そしてどんな操作でもいつでも{storage-condition:link}が
通知されるかもしれません。
このようなコンディションは実装の制限の指標であり、
プログラムのエラーというよりは実装のイメージであるため、
{storage-condition:link}の型のオブジェクトは
{error!condition:link}の型になってはいません。

@end

