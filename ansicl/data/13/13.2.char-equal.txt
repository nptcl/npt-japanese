;;
;;  ANSI Common Lisp 日本語訳
;;  13. 文字
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function CHAR=
;;  Function CHAR/=
;;  Function CHAR<
;;  Function CHAR>
;;  Function CHAR<=
;;  Function CHAR>=
;;  Function CHAR-EQUAL
;;  Function CHAR-NOT-EQUAL
;;  Function CHAR-LESSP
;;  Function CHAR-GREATERP
;;  Function CHAR-NOT-GREATERP
;;  Function CHAR-NOT-LESSP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 13.2.char-equal
@name: char=
@name: char/=
@name: char<
@name: char>
@name: char<=
@name: char>=
@name: char-equal
@name: char-not-equal
@name: char-lessp
@name: char-greaterp
@name: char-not-greaterp
@name: char-not-lessp
@type: function

Function `CHAR=`, `CHAR/=`, `CHAR<`, `CHAR>`, `CHAR<=`, `CHAR>=`,
`CHAR-EQUAL`, `CHAR-NOT-EQUAL`,
`CHAR-LESSP`, `CHAR-GREATERP`,
`CHAR-NOT-GREATERP`, `CHAR-NOT-LESSP`


## {syntax}

`char=` &rest *characters*+ => *generalized-boolean*  
`char/=` &rest *characters*+ => *generalized-boolean*  
`char<` &rest *characters*+ => *generalized-boolean*  
`char>` &rest *characters*+ => *generalized-boolean*  
`char<=` &rest *characters*+ => *generalized-boolean*  
`char>=` &rest *characters*+ => *generalized-boolean*  
`char-equal` &rest *characters*+ => *generalized-boolean*  
`char-not-equal` &rest *characters*+ => *generalized-boolean*  
`char-lessp` &rest *characters*+ => *generalized-boolean*  
`char-greaterp` &rest *characters*+ => *generalized-boolean*  
`char-not-greaterp` &rest *characters*+ => *generalized-boolean*  
`char-not-lessp` &rest *characters*+ => *generalized-boolean*  


## {arguments-and-values}

*character* -- 文字  
*generalized-boolean* -- {generalized-boolean}



## {description}

これらの関数は文字を比較します。

{char=:link}は、全ての文字が同じなら*true*を、それ以外は*false*を返却します。
もし2つの文字の何らかの属性が違うときは{char=:link}ではありません。

{char/=:link}は、全ての文字が違うとき*true*を、それ以外は*false*を返却します。

{char<:link}は、文字が単調増加のとき*true*を、それ以外は*false*を返却します。
もし2つの文字の属性が等しいとき、
{char<:link}の順序は文字コードを数値として`<`で比較したものと同じです。

{char>:link}は、文字が単調減少の場合は*true*を、それ以外は*false*を返却します。
もし2つの文字の属性が等しいとき、
{char>:link}の順序は文字コードを数値として`>`で比較したものと同じです。

{char<=:link}は、文字が単調非減少のとき*true*を、それ以外は*false*を返却します。
もし2つの文字の属性が等しいとき、
{char<=:link}の順序は文字コードを数値として`<=`で比較したものと同じです。

{char>=:link}は、文字が単調非増加の場合は*true*を、それ以外は*false*を返却します。
もし2つの文字の属性が等しいとき、
{char>=:link}の順序は文字コードを数値として`>=`で比較したものと同じです。

{char-equal:link}, {char-not-equal:link},
{char-lessp:link}, {char-greaterp:link},
{char-not-greaterp:link}, {char-not-lessp:link}は、
順に{char=:link}, {char/=:link}, {char<:link}, {char>:link},
{char<=:link}, {char>=:link}と似ていますが、
大文字小文字を無視します。
もし文字が単純ではない場合（文字の属性がある場合。{13.1.3:ab}を参照）
結果は実装で定義された動作になります。
例えば、ある実装では{char-equal:link}などの関数では、
属性を明確に無視するように定義しているかもしれません。
属性に何らかの効果がある場合は、
これらの比較関数の属性を定義する個所で規定しておく必要があります。


## {examples}

```lisp
(char= #\d #\d) → true
(char= #\A #\a) → false
(char= #\d #\x) → false
(char= #\d #\D) → false
(char/= #\d #\d) → false
(char/= #\d #\x) → true
(char/= #\d #\D) → true
(char= #\d #\d #\d #\d) → true
(char/= #\d #\d #\d #\d) → false
(char= #\d #\d #\x #\d) → false
(char/= #\d #\d #\x #\d) → false
(char= #\d #\y #\x #\c) → false
(char/= #\d #\y #\x #\c) → true
(char= #\d #\c #\d) → false
(char/= #\d #\c #\d) → false
(char< #\d #\x) → true
(char<= #\d #\x) → true
(char< #\d #\d) → false
(char<= #\d #\d) → true
(char< #\a #\e #\y #\z) → true
(char<= #\a #\e #\y #\z) → true
(char< #\a #\e #\e #\y) → false
(char<= #\a #\e #\e #\y) → true
(char> #\e #\d) → true
(char>= #\e #\d) → true
(char> #\d #\c #\b #\a) → true
(char>= #\d #\c #\b #\a) → true
(char> #\d #\d #\c #\a) → false
(char>= #\d #\d #\c #\a) → true
(char> #\e #\d #\b #\c #\a) → false
(char>= #\e #\d #\b #\c #\a) → false
(char> #\z #\A) → implementation-dependent
(char> #\Z #\a) → implementation-dependent
(char-equal #\A #\a) → true
(stable-sort (list #\b #\A #\B #\a #\c #\C) #'char-lessp)
→ (#\A #\a #\b #\B #\c #\C)
(stable-sort (list #\b #\A #\B #\a #\c #\C) #'char<)
→ (#\A #\B #\C #\a #\b #\c) ;実装A
→ (#\a #\b #\c #\A #\B #\C) ;実装B
→ (#\a #\A #\b #\B #\c #\C) ;実装C
→ (#\A #\a #\B #\b #\C #\c) ;実装D
→ (#\A #\B #\a #\b #\C #\c) ;実装E
```


## {exceptional-situations}

もし少なくとも1文字も与えられなかった場合は、
型{program-error:link}のエラーが発せられます。


## {see-also}

{2.1:ab}, {13.1.10:ab}


## {notes}

文字がコードの属性かあるいは実装定義の属性で異なる場合、
{char=:link}によって異なるものとしてみなされます。

`(char= c1 c2)`が*true*のときに、`(eq c1 c2)`が*true*である必要はありません。
{eq:link}は、{char=:link}が区別できないような2つの文字を区別できますが、
それは文字として区別しているのではなく、
低レベルの実装の特性に基づいて行われています。
もし`(eq c1 c2)`が*true*のときは、`(char= c1 c2)`もまた*true*です。
文字の{eql:link}と{equal:link}の比較は、{char=:link}と同じ方法で行われます。

関数{char-equal:link},
{char-not-equal:link},
{char-lessp:link},
{char-greaterp:link},
{char-not-greaterp:link},
{char-not-lessp:link}において、
{standard-char:link}の大文字小文字の比較は、
暗に{standard-character}の`A=a`, `B=b`, `...`, `Z=z`、
さらに、`9<A`か、あるいは`Z<0`の
どちらかで順序付けされることを意味します。

@end

