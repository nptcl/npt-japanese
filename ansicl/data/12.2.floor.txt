;;
;;  ANSI Common Lisp 日本語訳
;;  12. 数
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function FLOOR
;;  Function FFLOOR
;;  Function CEILING
;;  Function FCEILING
;;  Function TRUNCATE
;;  Function FTRUNCATE
;;  Function ROUND
;;  Function FROUND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 12.2.floor
@name: floor
@name: ffloor
@name: ceiling
@name: fceiling
@name: truncate
@name: ftruncate
@name: round
@name: fround
@type: function

Function `FLOOR`, `FFLOOR`, `CEILING`, `FCEILING`,
`TRUNCATE`, `FTRUNCATE`, `ROUND`, `FROUND`


## {syntax}

`floor` *number* `&optional` *divisor* => *quotient*, *remainder*  
`ffloor` *number* `&optional` *divisor* => *quotient*, *remainder*  
`ceiling` *number* `&optional` *divisor* => *quotient*, *remainder*  
`fceiling` *number* `&optional` *divisor* => *quotient*, *remainder*  
`truncate` *number* `&optional` *divisor* => *quotient*, *remainder*  
`ftruncate` *number* `&optional` *divisor* => *quotient*, *remainder*  
`round` *number* `&optional` *divisor* => *quotient*, *remainder*  
`fround` *number* `&optional` *divisor* => *quotient*, *remainder*


## {arguments-and-values}

*number* - 実数  
*divisor* - ゼロではない実数。デフォルトは整数の`1`。  
*quotient* -
{floor:link}, {ceiling:link}, {truncate:link}, {round:link}は整数。
{ffloor:link}, {fceiling:link}, {ftruncate:link}, {fround:link}は{float}。  
*remainder* - 実数


## {description}

これらの関数は*number*を*divisor*によって割り算し、
*quotient*と*remainder*を次の式になるよう返却します。

```
quotient*divisor+remainder=number
```

*quotient*は常に数学的な整数としてあらわされます。
数学的な整数の`1`より大きい数になる可能性があるとき
（例えば*remainder*がゼロではないとき）、
丸めと切り捨ては次のような処理ごとに依存します。

- {floor:link}, {ffloor:link}
  - {floor:link}と{ffloor:link}は*quotient*を負の無限大の方向に切り捨てます。
    つまり*quotient*は数学的な商を越えないような
    最も大きな数学的な整数として表されます。

- {ceiling:link}, {fceiling:link}
  - {ceiling:link}と{fceiling:link}は*quotient*を正の無限大の方向に切り捨てます。
    つまり*quotient*は数学的な商を下回らないような
    最も小さい数学的な整数として表されます。

- {truncate:link}, {ftruncate:link}
  - {truncate:link}と{ftruncate:link}は*quotient*をゼロの方向に切り捨てます。
    つまり*quotient*は数学的な商として同じ符号の数学的整数として表現され、
    かつ数学的な商より大きくならないような最大の積分等級を持つものです。

- {round:link}, {fround:link}
  - {round:link}と{fround:link}は*quotient*を数学的な整数に近い方向に丸めます。
    もし数学的な商が正確に2つの整数の間にあるとき
    （つまり、それは`integer+1/2`という形で表されます）、
    *quotient*は偶数（2で割ることができる）の整数へ丸められます。

これら全ての関数は、*number*に型の変換処理が行われます。

*x*と*y*が両方とも整数のとき*remainder*は整数であり、
*x*と*y*が両方とも{rational}のとき*remainder*は{rational}であり、
*x*と*y*のどちらかが{float}のときは{float}です。

{ffloor:link}, {fceiling:link}, {ftruncate:link}, {fround:link}は、
次に示す方法で引数間で違っている型を扱います。
もし*number*が{float}で*divisor*が{float}の大きな形式ではないとき、
最初の結果は*number*と同じ型の{float}です。
それ以外のときは最初の結果は伝染の規則にしたがって型が決定されます。
{12.1.1.2:ab}をご確認ください。
 

## {examples}

```lisp
(floor 3/2) =>  1, 1/2
(ceiling 3 2) =>  2, -1
(ffloor 3 2) =>  1.0, 1
(ffloor -4.7) =>  -5.0, 0.3
(ffloor 3.5d0) =>  3.0d0, 0.5d0
(fceiling 3/2) =>  2.0, -1/2
(truncate 1) =>  1, 0
(truncate .5) =>  0, 0.5
(round .5) =>  0, 0.5
(ftruncate -7 2) =>  -3.0, -1
(fround -7 2) =>  -4.0, 1
(dolist (n '(2.6 2.5 2.4 0.7 0.3 -0.3 -0.7 -2.4 -2.5 -2.6))
  (format t "~&~4,1@F ~2,' D ~2,' D ~2,' D ~2,' D"
          n (floor n) (ceiling n) (truncate n) (round n)))
>>  +2.6  2  3  2  3
>>  +2.5  2  3  2  2
>>  +2.4  2  3  2  2
>>  +0.7  0  1  0  1
>>  +0.3  0  1  0  0
>>  -0.3 -1  0  0  0
>>  -0.7 -1  0  0 -1
>>  -2.4 -3 -2 -2 -2
>>  -2.5 -3 -2 -2 -2
>>  -2.6 -3 -2 -2 -3
=>  NIL
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

なし。


## {notes}

*number*だけが与えられたとき、2つの結果は正確に決まっており、
2つの結果の数学的な合計が*number*の数学的な値と常に等しいようになります。

`(function number divisor)`と`(function (/ number divisor))`は
（ただし*function*は{floor:link}, {ceiling:link}, {truncate:link}, {round:link},
{ffloor:link}, {fceiling:link}, {ftruncate:link}, {fround:link}のどれか）、
最初の値は同じですが、
しかし2番目の値であるあまりは違っています。
例えば、

```lisp
(floor 5 2) =>  2, 1
(floor (/ 5 2)) =>  2, 1/2
```

もし{round:link}と似たようなものの、
しかし常に切り上げか切り捨て（偶数の整数に近い方向に行うのではなく）
のような効果を行いたいときは、
数学的な商が正確に2つの整数の半分であるとき、
プログラマーは`(floor (+ x 1/2))`か`(ceiling (- x 1/2))`のような
実行を考える必要があります。

@end

