;;
;;  ANSI Common Lisp 日本語訳
;;  5. データと制御フロー
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Special Operator BLOCK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 5.3.block
@name: block
@type: special-operator

Special Operator `BLOCK`


## {syntax}

`block` *name* *form\** => *result\**


## {arguments-and-values}

*name* - シンボル  
*form* - フォーム  
*result* - もし通常の返却の場合はフォームの値が返却値が、
明示的な返却（{return-from:link}によるもの）の場合はその値が渡されます。


## {description}

{block:link}は、*name*という`block`が確立され、
そのあと{implicit-progn}として*form*が評価されます。

{special-operator}の{block:link}と{return-from:link}は一緒に動作し、
構造的で、レキシカルで、非局所的な退出機能を提供します。

レキシカルに囲まれた*form*の任意の場所で、
{return-from:link}の引数に*name*を与えることで
{block:link}のフォームから制御と値を返却することができます。
ただし、同じ名前の`block`がはさまって確立しているときは、
外側の`block`は内側のものに隠蔽されます。

`block`の名前は、レキシカルスコープと動的エクステントを持ちます。

いったん確立すれば、`block`は通常の返却か、明示的な返却の
どちらかひとつで終了するでしょう。


## {examples}

```lisp
(block empty) =>  NIL
(block whocares (values 1 2) (values 3 4)) =>  3, 4
(let ((x 1)) 
  (block stop (setq x 2) (return-from stop) (setq x 3))
  x) =>  2
(block early (return-from early (values 1 2)) (values 3 4)) =>  1, 2
(block outer (block inner (return-from outer 1)) 2) =>  1
(block twin (block twin (return-from twin 1)) 2) =>  2
;; Contrast behavior of this example with corresponding example of CATCH.
(block b
  (flet ((b1 () (return-from b 1)))
    (block b (b1) (print 'unreachable))
    2)) =>  1
```


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{return:link},
{return-from:link},
{3.1:ab}


## {notes}

なし。

@end

