;;
;;  ANSI Common Lisp 日本語訳
;;  21. ストリーム
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function READ-CHAR-NO-HANG
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 21.2.read-char-no-hang
@name: read-char-no-hang
@type: function

Function `READ-CHAR-NO-HANG`


## {syntax}

`read-char-no-hang` `&optional`
 *input-stream* *eof-error-p* *eof-value* *recursive-p*
 => *char*


## {arguments-and-values}

*input-stream* - 入力ストリーム指定子。デフォルトは標準入力。  
*eof-error-p* - {generalized-boolean}。デフォルトは*true*。  
*eof-value* - オブジェクト。デフォルトは{nil!variable:link}。  
*recursive-p* - {generalized-boolean}。デフォルトは*false*。  
*char* - 文字か、*eof-value*


## {description}

{read-char-no-hang:link}は、
*input-stream*に利用可能な文字があるとき、
その文字を返却します。
もし文字が利用可能ではないとき、
{read-char-no-hang:link}は{nil!variable:link}を返却します。

もし*recursive-p*が*true*のとき、
この呼び出しはより上位レベルの{read:link}によるものか、
Lispのリーダーによって使われる似たような関数から
埋め込まれたものであると見なされます。

もしファイルの終わりが発生し、
*eof-error-p*が*false*であるときは、
*eof-value*が返却されます。


## {examples}

```lisp
;; このコードは実装がコンソールからの入力の終端に
;; 改行を必要としないことを仮定しています。
(defun test-it ()
  (unread-char (read-char))
  (list (read-char-no-hang) 
        (read-char-no-hang) 
        (read-char-no-hang)))
=>  TEST-IT
;; 実装Aは、コンソールのインタラクティブな入力の終端に
;; 改行を必要としません。
 (test-it)
>>  a
=>  (#\a NIL NIL)
;; 実装Bは、コンソールのインタラクティブな入力の終端に
;; 改行を必要とし、その開業は入力ストリームに残します。
(test-it)
>>  a<NEWLINE>
=>  (#\a #\Newline NIL)
```


## {affected-by}

{*standard-input*:link},
{*terminal-io*:link}


## {exceptional-situations}

*eof-error-p*が*true*でありファイルの終わりに到達したときは、
型{end-of-file:link}のエラーが通知されます。


## {see-also}

{listen:link}


## {notes}

{read-char-no-hang:link}は正確に{read-char:link}と似ていますが、
もし文字を（例えばキーボードから）取得するために
待機する必要があるような場合は違っており、
このような場合は待つことなしに即座に{nil!variable:link}を返却します。

@end


