;;
;;  ANSI Common Lisp 日本語訳
;;  17. シーケンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function REDUCE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 17.3.reduce
@name: reduce
@type: function

Function `REDUCE`


## {syntax}

`reduce` *function* *sequence*
&key *key* *from-end* *start* *end* *initial-value* => *result*


## {arguments-and-values}

*function* - 引数なしか2つの引数を取る関数の指定子  
*sequences* - {proper-sequence}  
*key* - 1つの引数を取る関数の指定子、または{nil!variable:link}  
*from-end* - {generalized-boolean}、デフォルトは*false*  
*start*, *end* - *sequence*の{bounding-index-designators}。
デフォルトは*start*, *end*それぞれ`0`と{nil!variable:link}。  
*initial-value* - オブジェクト  
*result* - オブジェクト


## {description}

{reduce:link}は、*function*で二項演算を行うために使われ、
*sequence*の*stard*, *end*の境界内にある要素を結び付けます。

*function*は、引数に*sequence*の2つの要素か、
それらの要素が結合された結果を受け付ける必要があります。
*function*はまた、引数なしも受け付けなければなりません。

もし*key*が与えられたとき、`reduce`された値の展開に使われます。
*key*関数は、もし*initial-value*が与えられなかったとき、
*sequence*の各要素に対して、`reduce`の実行順に、正確に一度だけ適用されます。
*key*関数は通常*sequence*の要素の、判定に使われる要素の部分を返却します。
もし*key*が与えられないか、あるいは{nil!variable:link}が指定されたとき、
*sequence*の要素そのものが使われます。

`reduce`は左結合で行われますが、
*from-end*が*true*のときは右結合です。

もし*initial-value*が与えられたとき、
それは論理的にサブシーケンスの前に配置され
（ただし*from-end*が*true*の場合は後に配置されます）
それを含めて`reduce`操作が行われます。

通常の場合、{reduce:link}の返却値は、
*sequence*の要素の連続した組み合わせを
*function*で適用した結果を組み合わせたものです。
もしサブシーケンスが正確にひとつの要素であり、
*initial-value*が与えられていなかったときは、
その要素が返却され、*function*は呼び出されません。
もしサブシーケンスが空であり、*initial-value*が与えられらときは、
*initial-value*が返却され、*function*は呼び出されません。
もしサブシーケンスが空であり、*initial-value*が与えられなかったときは、
*function*は引数なしで呼び出され、
{reduce:link}の返却値は、
どんな値であれ*function*の結果が返却されます。
*function*が2つの引数ではない方法で呼び出されるのは、
この場合のみです。


## {examples}

```lisp
(reduce #'* '(1 2 3 4 5)) =>  120
(reduce #'append '((1) (2)) :initial-value '(i n i t)) =>  (I N I T 1 2)
(reduce #'append '((1) (2)) :from-end t                  
                            :initial-value '(i n i t)) =>  (1 2 I N I T) 
(reduce #'- '(1 2 3 4)) ==  (- (- (- 1 2) 3) 4) =>  -8
(reduce #'- '(1 2 3 4) :from-end t)    ;Alternating sum.
==  (- 1 (- 2 (- 3 4))) =>  -2
(reduce #'+ '()) =>  0
(reduce #'+ '(3)) =>  3
(reduce #'+ '(foo)) =>  FOO
(reduce #'list '(1 2 3 4)) =>  (((1 2) 3) 4)
(reduce #'list '(1 2 3 4) :from-end t) =>  (1 (2 (3 4)))
(reduce #'list '(1 2 3 4) :initial-value 'foo) =>  ((((foo 1) 2) 3) 4)
(reduce #'list '(1 2 3 4)
       :from-end t :initial-value 'foo) =>  (1 (2 (3 (4 foo))))
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

*sequence*が{proper-sequence}でないとき、
型{type-error:link}のエラーを通知する準備をしなければなりません。


## {see-also}

{3.6:ab}


## {notes}

なし。

@end

