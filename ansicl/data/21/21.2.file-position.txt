;;
;;  ANSI Common Lisp 日本語訳
;;  21. ストリーム
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function FILE-POSITION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 21.2.file-position
@name: file-position
@type: function

Function `FILE-POSITION`


## {syntax}

`file-position` *stream* => *position*  
`file-position` *stream* *position-spec* => *success-p*


## {arguments-and-values}

*stream* - ストリーム  
*position-spec* - ファイルの位置指定子
*position* - ファイルの位置か、{nil!variable:link}  
*success-p* - {generalized-boolean}


## {description}

*stream*内の現在の位置について、返却を行うか変更を行います。

*position-spec*が指定されていないとき、
{file-position:link}は*stream*の現在のファイルの位置を返却し、
もしそれが決定できないときは{nil!variable:link}を返却します。

*position-spec*が指定されたとき、
*stream*のファイルの位置が（可能であれば）設定されます。
もし位置の変更が正しく行われたとき、
{file-position:link}は*true*を返却し、
そうでなかったときは*false*を返却します。

{file-position:link}がひとつの引数のときの返却された整数値は、
同じファイルに*position-spec*として使用できるように
受け入れなければなりません。

文字型のファイルのとき、
{read-char:link}か{write-char:link}の一回の操作による実行は、
文字セットの変換や（そのような変換には、
Common Lispの`#\Newline`文字と外部のASCII文字である、
キャリッジリターン・ラインフィードの列のような
二つの間の変換があります）、
その他の実装の仕様により、
ファイルの位置が`1`より大きな値で増加するかもしれません。
バイナリファイルのとき、
{read-byte:link}か{write-byte:link}の全ての操作は、
ファイルの位置が`1`だけ増加します。


## {examples}

```lisp
(defun tester ()
  (let ((noticed '()) file-written)
    (flet ((notice (x) (push x noticed) x))
      (with-open-file (s "test.bin" 
                         :element-type '(unsigned-byte 8)
                         :direction :output
                         :if-exists :error)
         (notice (file-position s)) ;1
         (write-byte 5 s) 
         (write-byte 6 s)
         (let ((p (file-position s)))
           (notice p) ;2
           (notice (when p (file-position s (1- p))))) ;3
         (write-byte 7 s)
         (notice (file-position s)) ;4
         (setq file-written (truename s)))
       (with-open-file (s file-written
                          :element-type '(unsigned-byte 8)
                          :direction :input)
         (notice (file-position s)) ;5
         (let ((length (file-length s)))
           (notice length) ;6
           (when length
             (dotimes (i length)
               (notice (read-byte s)))))) ;7,...
       (nreverse noticed))))
=>  tester
(tester)
=>  (0 2 T 2 0 2 5 7)
OR=>  (0 2 NIL 3 0 3 5 6 7)
OR=>  (NIL NIL NIL NIL NIL NIL)
```


## {side-effects}

引数に*position-spec*が指定されたとき、
*stream*のファイル位置はおそらく移動します。


## {affected-by}

{file-position:link}による返却値は、
入出力の操作が実行されるたびに単調に増加します。


## {exceptional-situations}

*position-spec*が指定されたとき、その値が大きすぎるか、
あるいはその他の理由で適用できなかったときはエラーが発生します。


## {see-also}

{file-length:link},
{file-string-length:link},
{open:link}


## {notes}

文字ファイルを一定のサイズのレコードの列として表現する実装では、
例えば`<<レコード番号>>*<最大レコードサイズ>>+<レコード内の文字>>`のように
ファイル位置を算出することができるかもしれません。
これは各文字の読み書きに応じて単調に増加するため有効な計算です。
ただし、各ステップで必ずしも1ずつ増えるわけではありません。
もし、ある整数をレコード番号と文字番号をもとに算出したとき、
与えられたレコードが指定された文字番号に対して短すぎることが判明すれば、
その整数値は{file-position:link}の*position-spec*として
「不適切」とみなされるかもしれません。

@end

