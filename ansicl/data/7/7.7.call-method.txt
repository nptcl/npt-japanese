;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Local Macro CALL-METHOD
;;  Local Macro MAKE-METHOD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.call-method-local
@name: call-method
@name: make-method
@type: local-macro

Local Macro `CALL-METHOD`, `MAKE-METHOD`


## {syntax}

`call-method` *method* &optional *next-method-list* => *result\**  
`make-method` *form* => *method-object*


## {arguments-and-values}

*method* - メソッドオブジェクトか、リスト（下記参照）。評価はされません。  
*method-object* - メソッドオブジェクト  
*next-method-list* - メソッドオブジェクトのリスト。評価はされません。  
*results* - メソッドの実行による返却値  


## {description}

マクロ{call-method:link}は、method-combination内で使用されます。
メソッドがどのように呼ばれるかという詳細を
実装依存で隠蔽することができます。
マクロ{call-method:link}はレキシカルスコープを持っており、
有効なメソッドフォーム内でのみ使用することができます。

グローバル環境下で、{call-method:link}が`fbound`かどうかは実装依存です。
しかし、再定義と{call-method:link}のシャドウについての制限は、
`COMMON-LISP`パッケージにある、
グローバル環境下において`fbound`であるシンボルと同じです。
{call-method:link}を有効なメソッド定義フォームの外で
使おうとしたときの結果は未定義です。

マクロ{call-method:link}は、指定されたメソッド実行し、
その際に引数と{call-next-method:link}、{next-method-p:link}の定義を与えます。
もし{call-method:link}の実行が文脈的に{make-method:link}の内側であったとき、
引数はメソッドに指定されたものになります。
そうでなければ、引数はジェネリック関数に指定されたものです。
{call-next-method:link}、{next-method-p:link}の定義は、
指定された*next-method-list*に依存します。

もし*method*がリストの場合、
リストの最初の要素はシンボル{make-method:link}、
2番目の要素はフォームでなければなりません。
このようなリストは、与えられたフォームが
メソッド関数のボディ部であるようなメソッドオブジェクトを意味します。

*next-method-list*は、メソッドオブジェクトか、
あるいは最初の要素はシンボル{make-method:link}であり
2番目の要素がフォームであるようなリストを含むことができます。

{make-method:link}が使えるのは、この2か所だけです。
{make-method:link}を使用したフォームは、
`null`の{lexical-environment}から
加えてローカルマクロ{call-method:link}の定義と、
`COMMON-LISP-USER`パッケージからアクセスできないシンボル名の束縛で
拡張された環境下で評価されます。

メソッドで使用できる{call-next-method:link}関数は、
*next-method-list*の最初のメソッドを呼び出します。
そのメソッドで使用できる{call-next-method:link}関数は、
次に*next-method-list*の2番目のメソッドを呼び出し、
次のメソッドのリストを使い果たすまでこれを繰り返します。

*next-method-list*が与えられないときは、
メソッドで使用できる{call-next-method:link}関数は
型{control-error:link}のエラーを通知し、
メソッドで使用できる{next-method-p:link}関数は
{nil!variable:link}を返します。


## {examples}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{call-next-method:link},
{define-method-combination:link},
{next-method-p:link}


## {notes}

なし。

@end

