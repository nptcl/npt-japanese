;;
;;  ANSI Common Lisp 日本語訳
;;  14. コンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function LDIFF
;;  Function TAILP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 14.2.ldiff
@name: ldiff
@name: tailp
@type: function

Function `LDIFF`, `TAILP`


## {syntax}

`ldiff` *list* *object* => *result-list*  
`tailp` *object* *list* => *generalized-boolean*


## {arguments-and-values}

*list* - リスト。{dotted-list}を受け付けます。  
*object* - オブジェクト  
*result-list* - リスト  
*generalized-boolean* - {generalized-boolean}


## {description}

*object*が*list*のどれかの末尾と等しいとき、
{tailp:link}は*true*を返却し、それ以外は*false*を返却します。

*object*が*list*のどれかの末尾と等しいとき、
{ldiff:link}は、*list*のリスト構造の中で、
*object*より前にある要素を
新しいリストとして返却します。
それ以外のときは、*list*のコピーを返却します。


## {examples}

```lisp
(let ((lists '#((a b c) (a b c . d))))
  (dotimes (i (length lists)) ()
    (let ((list (aref lists i)))
      (format t "~2&list=~S ~21T(tailp object list)~
                 ~44T(ldiff list object)~%" list)
        (let ((objects (vector list (cddr list) (copy-list (cddr list))
                               '(f g h) '() 'd 'x)))
          (dotimes (j (length objects)) ()
            (let ((object (aref objects j)))
              (format t "~& object=~S ~21T~S ~44T~S"
                      object (tailp object list) (ldiff list object))))))))
>>  
>>  list=(A B C)         (tailp object list)    (ldiff list object)
>>   object=(A B C)      T                      NIL
>>   object=(C)          T                      (A B)
>>   object=(C)          NIL                    (A B C)
>>   object=(F G H)      NIL                    (A B C)
>>   object=NIL          T                      (A B C)
>>   object=D            NIL                    (A B C)
>>   object=X            NIL                    (A B C)
>>  
>>  list=(A B C . D)     (tailp object list)    (ldiff list object)
>>   object=(A B C . D)  T                      NIL
>>   object=(C . D)      T                      (A B)
>>   object=(C . D)      NIL                    (A B C . D)
>>   object=(F G H)      NIL                    (A B C . D)
>>   object=NIL          NIL                    (A B C . D)
>>   object=D            T                      (A B C)
>>   object=X            NIL                    (A B C . D)
=>  NIL
```


## {side-effects}

{ldiff:link}と{tailp:link}は、どちらも引数を修正しません。

Neither ldiff nor tailp modifies either of its arguments.


## {affected-by}

なし。


## {exceptional-situations}

*list*が{proper-list}でも{dotted-list}でもないときは、
型{type-error:link}のエラーを発生させる準備をする必要があります。


## {see-also}

{set-difference:link}


## {notes}

もし*list*が{circular-list}のとき、
*object*が実際に*list*の末尾である場合にのみ、
{tailp:link}は確実に値を返却します。
その他の結果は未定義であり、
ある実装では循環を検出して*false*を返却しますが、
ある実装ではそのような状況を検出しませんので、
このような場合、{tailp:link}は値を返却することなく、
ただ無限にループするかもしれません。

{tailp:link}は次のように定義できます。

```lisp
(defun tailp (object list)
  (do ((list list (cdr list)))
      ((atom list) (eql list object))
     (if (eql object list)
         (return t))))
```

そして{ldiff:link}は次のようになります。

```lisp
(defun ldiff (list object)
  (do ((list list (cdr list))
       (r '() (cons (car list) r)))
      ((atom list)
       (if (eql list object) (nreverse r) (nreconc r list)))
    (when (eql object list)
      (return (nreverse r)))))
```

@end

