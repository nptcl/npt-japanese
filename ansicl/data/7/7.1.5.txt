;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  7.1.5 Shared-Initialize
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.1.5
@type: text

ジェネリック関数{shared-initialize:link}は、
インスタンスの作成時、インスタンスの再初期化時、
クラス再定義によるインスタンス更新時、違うクラスへのインスタンス更新時において、
インスタンスのスロット値を、{initialization-arguments}か
`:initform`フォームによって設定する際に使用されます。
method-combinationは`standard`が使用されます。
引数は次のような順番で受け取ります。
初期化されるインスタンス、インスタンスのアクセス可能なスロット名の集合、
そして任意の長さの{initialization-arguments}です。
最初2つよりあとの引数は、{initialization-arguments}リストの形にしなければなりません。

{shared-initialize:link}の2番目の引数は、下記のどちらかに従います。

- 引数はスロットの名前のリスト（空リストでも可）であり、
スロット名の集合を指定したものです。

- 引数はシンボル{t:link}であり、すべてのスロットの集合を指定したものです。

システムが提供している{shared-initialize:link}のメソッドでは、
第一引数の特定パラメーターが{standard-object:link}クラスのものが存在します。
このメソッドは共有か局所かに関わらず、各スロットに対して次の振る舞いを行います。

- もし{initialization-arguments}リスト中の
{initialization-arguments}がスロットへの値を特定した場合は、
メソッドが実行する前に対象のスロットにすでに値が格納されていても、
スロットへ特定した値が格納されます。
影響があるスロットは、{shared-initialize:link}の
第二引数で指定されたスロットとは独立しています。

- 第二引数によって指定されたどんなスロットも、
この時点においてまだ`unbound`であった場合は、
`:initform`フォームに従って初期化されます。
`:initform`フォームを持つどのスロットも、
フォームは{defclass:link}宣言のレキシカル環境にて評価され、
その結果がスロットに格納されます。
例えば、`before`メソッドがスロットへ値を格納する場合、
`:initform`フォームはスロットへの値の格納には使用されないでしょう。
もし第二引数が指定した名前が、
インスタンスのアクセス可能なスロットに対応していなかった場合は、
結果は定義されていません。

- この規則は{7.1.4:ab}に従います。

ジェネリック関数{shared-initialize:link}は、
システムが提供するメソッド{reinitialize-instance:link}, 
{update-instance-for-different-class:link},
{update-instance-for-redefined-class:link}, 
そして{initialize-instance:link}によって呼び出されます。
このようにメソッドは
これらすべてのコンテキスト上で実行できるようなアクションを指定するように、
{shared-initialize:link}を記述することができます。

@end

