;;
;;  ANSI Common Lisp 日本語訳
;;  4. 型とクラス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function SUBTYPEP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 4.4.subtypep
@name: subtypep
@type: function

Function `SUBTYPEP`


## {syntax}

`subtypep` *type-1* *type-2* `&optional` *environment* => *subtype-p*, *valid-p*


## {arguments-and-values}

*type-1* - 型指定子  
*type-2* - 型指定子  
*environment* - 
環境オブジェクト。デフォルトは{nil!variable:link}であり、
これは{null-lexical-environment}と現在のグローバルな環境を示します。  
*subtype-p* - {generalized-boolean}  
*valid-p* - {generalized-boolean}


## {description}

もし*type-1*が*type-2*の認識可能なサブタイプであれば最初の値は*true*です。
そうではないときは最初の値は*false*であり、
これは*type-1*が*type-2*のサブタイプではないか、
あるいは*type-1*が*type-2*がサブタイプではあるが
認識可能なサブタイプではないことを意味します。

第二返却値は、最初の値が確実であるかを示します。
もしこの値が*true*なら、
最初の値はサブタイプの関係が正確であることを示します
（最初の値が*true*であれば第二返却値は常に*true*です）。

次の表は、可能性のある返却値の組み合わせを要約したものです。

|Value 1|Value 2|意味|
|-------|-------|----|
|*true* |*true* |*type-1*は確実に*type-2*のサブタイプ|
|*false*|*true* |*type-2*は確実に*type-2*のサブタイプではない|
|*false*|*false*|{subtypep:link}はこの関係を決定できないので、*type-1*は*type-2*のサブタイプかもしれないしそうではないかもしれない|

Figure 4-9. `subtypep`の返却値の可能性

{subtypep:link}は、
次に示す型指定子のうち、少なくとものひとつを引数に含んでいたときのみ
多値である*false*、*false*を返却します。
その型指定子は、
{and!type:link},
{eql!type:link},
リストフォームの{function!system-class:link},
{member!type:link},
{not!type:link},
{or!type:link},
{satisfies:link},
{values!type:link}です
（型指定子は、型展開後にそれらのシンボルが含まれる位置で
型指定子が意味のある使われ方をして呼び出されているときは、
そのようなシンボルを含むことになります）。
このような結果のひとつとして
もし*type-1*も*type-2*もそれらの型指定子を含まないときは、
{subtypep:link}は正確な関係を決定する義務があります。
とくに{subtypep:link}は
もしそれらの引数が{equal:link}で一致しており
それらの型指定子を含まないときは、
多値の*true*、*true*を返却します。

もし*type-1*と*type-2*の両方が
{figure_4.2:link}で表される名前のみ含まれているときか、
または型の名前が{defstruct:link}か
{define-condition:link}か
{defclass:link}か
これらの名前の展開による派生型であるときは、
{subtypep:link}は決して第二返却値が{nil!variable:link}になりません。
{figure_4.2:link}のリスト内の型指定子や
{defclass:link}と{defstruct:link}による名前は、
派生された型として実装される場合もありますが、
{subtypep:link}はそれらの型を原始的なものとみなします。

{subtypep:link}によって反映される型と型との関係は、
特定の実装によって指定されます。
例えば、もし実装が浮動小数の型を
`single`ただひとつサポートしていた場合、
その実装は`(subtypep 'float 'long-float)`を
*true*, *true*で返却します（2つの型が同一の場合）。

`*`以外の全てを`T1`と`T2`としたとき、
`(array T1)`と`(array T2)`は違う型指定子ですが、
もしそれらを参照する配列が正確に同じ{specialized}の表現のときは、
常に同じものの集合を参照します。
例えば、もし
`(upgraded-array-element-type 'T1)`と
`(upgraded-array-element-type 'T2)`が
常に同じオブジェクトの集合を参照する
違う型指定子を返却するようなときです。
別の言い方をすると、

```lisp
`(array type-specifier)
```

と

```lisp
`(array ,(upgraded-array-element-type 'type-specifier))
```

はどちらも同じ{specialized}配列で表現された
集合を参照しています。
`*`以外の全ての`T1`と`T2`において、
`(array T1)`と`(array T2)`が
それぞれ区別できる{specialized}な表現により違った配列を参照しているときは、
2つの型の共通部分は空の集合です。

つまり、

```lisp
(subtypep '(array T1) '(array T2)) =>  true
```

であるというのは、

```lisp
(upgraded-array-element-type 'T1)
(upgraded-array-element-type 'T2) 
```

上記の返却値は、
常に同じオブジェクトの集合を参照しているような
違った2つの型指定子が返却されます。

`*`以外の全てを`T1`と`T2`としたとき、

```lisp
(subtypep '(complex T1) '(complex T2)) =>  true, true
```

という結果が得られるのは、下記の2つのどちらかの条件のときです。

1. `T1`は`T2`のサブタイプであるか、

2.  `(upgraded-array-element-type 'T1)`と
`(upgraded-array-element-type 'T2)`が
常に同じオブジェクトの集合を参照する
違う型指定子を返却するようなときです。
このような場合、`(complex T1)`と`(complex T2)`の両方は、
どちらも同じ{specialized}な表現を参照します。

それ以外のときは、*false*, *false*を返却します。

下記のフォームについて、

```lisp
(subtypep '(complex single-float) '(complex float))
```

これはすべｔの実装において*true*を返却しなければなりません。
しかし下記のフォーム

```lisp
(subtypep '(array single-float) '(array float))
```

こちらについては、
配列の{specialized}な表現で`single-float`と他の浮動小数を
区別できない処理系でのみ*true*が返却されます。


## {examples}

```lisp
(subtypep 'compiled-function 'function) =>  true, true
(subtypep 'null 'list) =>  true, true
(subtypep 'null 'symbol) =>  true, true
(subtypep 'integer 'string) =>  false, true
(subtypep '(satisfies dummy) nil) =>  false, implementation-dependent
(subtypep '(integer 1 3) '(integer 1 4)) =>  true, true
(subtypep '(integer (0) (0)) 'nil) =>  true, true
(subtypep 'nil '(integer (0) (0))) =>  true, true
(subtypep '(integer (0) (0)) '(member)) =>  true, true ;or false, false
(subtypep '(member) 'nil) =>  true, true ;or false, false
(subtypep 'nil '(member)) =>  true, true ;or false, false
```

`<aet-x>`と`<aet-y>`は
その実装において常に同じオブジェクトの集合を参照していない
2つの違った型指定子であるとします。
しかし{make-array:link}関数は、
同じ配列の型としてオブジェクトを返却します。

したがって、次のようになります。

```lisp
 (subtypep (array-element-type (make-array 0 :element-type '<aet-x>))
           (array-element-type (make-array 0 :element-type '<aet-y>)))
=>  true, true

 (subtypep (array-element-type (make-array 0 :element-type '<aet-y>))
           (array-element-type (make-array 0 :element-type '<aet-x>)))
=>  true, true
```

もし`(array <aet-x>)`と`(array <aet-y>)`が
正確に同じオブジェクトの集合のための違う名前であるとき、
それらの名前は常に同じオブジェクトの集合を参照しなければなりません。
これの意味することは、次のテストの集合もまた*true*ということです。

```lisp
(subtypep '(array <aet-x>) '(array <aet-y>)) =>  true, true
(subtypep '(array <aet-y>) '(array <aet-x>)) =>  true, true
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{4.2:ab}


## {notes}

{subtypep:link}の仕様の
{array:link}と{complex!system-class:link}の型の間にある
小さな違いは重要です。
なぜなら、実際の部分の型と独立して
返却値の部分の型を指定できるような
複素数を作成する関数が存在しないからです。
したがって、複素数の型の場合は、
実際の部分の型はひとつ以上の型はあるものの、
その数を参照して決定されます。
例えば、`17`は`(mod 18)`の型ですし、
同様に`(mod 256)`の型であり、{integer:link}の型です。
そして、`2.3f5`は{single-float:link}の型であり、
{float!system-class:link}の型でもあります。

@end

