;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro DEFMETHOD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.defmethod
@name: defmethod
@type: macro

Macro `DEFMETHOD`


## {syntax}

`defmethod` *function-name* *method-qualifier\**
 *specialized-lambda-list* [[*declaration\** | *documentation*]] *form\**  
=> *new-method*

```
function-name ::= {symbol | (setf symbol)}

method-qualifier ::= non-list

specialized-lambda-list ::=
  ({var | (var parameter-specializer-name)}*
   [&optional {var | (var [initform [supplied-p-parameter] ])}*]
   [&rest var]
   [&key {var | ({var | (keywordvar)} [initform [supplied-p-parameter]])}*
         [&allow-other-keys] ]
   [&aux {var | (var [initform] )}*])

parameter-specializer-name ::= symbol | (eql eql-specializer-form)
```


## {arguments-and-values}

*declaration* - 宣言の式。評価はされません。  
*documentation* - 文字列。評価はされません。  
*var* - 変数名  
*eql-specializer-form* - フォーム  
*form* - フォーム  
*initform* - フォーム  
*supplied-p-parameter* - 変数名  
*new-method* - 新しいメソッドオブジェクト  


## {description}

マクロ{defmethod:link}は、ジェネリック関数にメソッドを定義します。

もし`(fboundp function-name)`のときは、
ジェリック関数は次のような設定で作成されます。
デフォルトの引数の優先順位オーダー（各引数は左が右より特定的）、
ジェネリック関数クラスは{standard-generic-function:link}、
メソッドグラスは{standard-method:link}、
そしてmethod-combinationは`standard`です。
ジェネリック関数のラムダリストは、定義されるメソッド関数のラムダリストと合致します。
もし{defmethod:link}フォームのキーワード引数があるときは、
ジェネリック関数のラムダリストに`&key`があります
（ただしキーワード引数自体はありません）。
もし*function-name*が通常の関数か、マクロか、
{special-operator}の名前の場合はエラーが発生します。

もしジェネリック関数が現に*function-name*という名前であるとき、
メソッドのラムダリストがそのジェネリック関数のラムダリストと合致します。
もしこの状態が保持できないときは、エラーが発せられます。
この文脈の合致についての定義は、{7.6.4:ab}をご確認ください。

各*method-qualifier*の引数は、
メソッドを識別するためにmethod-combinationで使用されるオブジェクトです。
method-combinationタイプは、メソッドの{qualifiers}でできることを
さらに制限するかもしれません。
`standard` method-combinationタイプは、
{qualifiers}のないメソッドと、
`:before`, `:after`, `:around`いずれかのキーワードの
単体の{qualifiers}を使用することができます。

引数*specialized-lambda-list*は、通常のラムダリストと似ていますが、
{required-parameter}を{specialized-parameter}に置き換えることができます。
{specialized-parameter}は`(var parameter-specializer-name)`形式のリストです。
ただ{required-parameter}だけが特定化できます。
もし、*parameter-specializer-name*がシンボルのときは、クラスの名前です。
もしリストの場合は、`(eql eql-specializer-form)`の形式になります。
*parameter-specializer-name*が`(eql eql-specializer-form)`形式のときは、
対応する引数が*eql-specializer-form*の値のオブジェクトと、
{eql!function:link}で一致しなければメソッドが適用できないことを意味します。
{required-parameter}に*parameter-specializer-name*がない場合は、
標準の値としてクラス{t!system-class:link}が与えられます。
さらなる詳細については、{7.6.2:ab}をご確認ください。

引数*form*は、メソッドのボディ部です。
メソッドのボディ部は、暗黙の`block`で囲まれます。
もし*function-name*がシンボルのとき、
`block`の名前はジェネリック関数と同じ名前です。
もし*function-name*が`(setf symbol)`のリスト形式の場合は、
`block`の名前は*symbol*です。

作成されるメソッドオブジェクトのクラスは、
メソッドを定義するジェネリック関数の
メソッドクラスオプションで指定されたものです。

もしジェネリック関数が、特定化されたパラメーターと{qualifiers}が
合致しているメソッドをすでに持っている場合は、
{defmethod:link}は既存のメソッドを定義された現在のものに置き換えます。

特定化されたパラメーターについては、
{7.6.2:ab}で説明したように特定パラメーター名から派生します。

マクロ{defmethod:link}の展開は、各{specialized-parameter}を**参照**します
（{declare:link}の定義の{ignore:link}の定義を参照してください）。
これは、特定化するパラメーター名を
明に{t!system-class:link}とした場合も含まれます。
つまり、メソッド本体で{specialized-parameter}が参照されない場合でも
コンパイラーは警告を出力しませんが、
メソッド本体で{specialized-parameter}ではない
パラメーターが参照されない場合は警告を発します。
このため、{t!system-class:link}を特定化したパラメーターは、
{specialized-parameter}ではないパラメーターと
文脈的に同一ではありません。

メソッド本体の先頭にある宣言で、
メソッドのラムダリストの変数に適用されるものは、
束縛に対応するものと同じスコープを持つ宣言として扱われます。

メソッド本体の先頭にある宣言で、
{call-next-method:link}と{next-method-p:link}に束縛されてる関数への適用は、
メソッドのボディ部内でのそれらの関数の参照に適用されます。
外側で行われる
{call-next-method:link}と{next-method-p:link}の
どのような束縛についても、
またそれらの束縛に関連付けられる宣言に対しても、
メソッドのボディ部内では隠蔽されます。

メソッド本体の先頭にある自由形式の宣言の範囲は
メソッドのボディ部全体であり、
それは暗黙のローカル関数の定義も含まれます。
しかしラムダリストの変数の初期化フォームは除外されます。

{defmethod:link}は、コンパイル時にはどのような副作用も要求されていません。
特に、コンパイル時に呼び出すためのメソッドは導入されません。
実装者は、コンパイル時のエラーチェック
（関数呼び出し時の引数の個数チェックであったり、
あるいは関数名の定義を確認したりすること）のために、
ジェネリック関数についての情報を保存するか選択できます。

*documentation*は、メソッドオブジェクトにドキュメント文字を割り当てます。


## {examples}

なし。


## {affected-by}

参照されるジェネリック関数の定義


## {exceptional-situations}

もし*function-name*が通常の関数か、マクロか、
{special-operator}の名前の場合は、
型{error!condition:link}のエラーが発生します。

もしジェネリック関数が現に*function-name*という名前であるとき、
メソッドのラムダリストがそのジェネリック関数のラムダリストと合致します。
もしこの状態が保持できないときは、
型{error!condition:link}のエラーが発生します。


## {see-also}

{defgeneric:link},
{documentation:link},
{7.6.2:ab},
{7.6.4:ab},
{7.6.3:ab},
{3.4.11:ab}


## {notes}

なし。

@end

