;;
;;  ANSI Common Lisp 日本語訳
;;  5. データと制御フロー
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function EQUALP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 5.3.equalp
@name: equalp
@type: function

Function `EQUALP`


## {syntax}

`equalp` *x* *y* => *generalized-boolean*


## {arguments-and-values}

*x* - オブジェクト  
*y* - オブジェクト  
*generalized-boolean* - {generalized-boolean}


## {description}

もし`x`と`y`が{equal:link}であれば*true*を返却します。
あるいはそれらの要素がお互い同じ型であり、
下記に示す場合のときは*true*が返却されます。

- 文字
  - もし2つの文字が、{char-equal:link}のとき。
    <br><br>

- 数
  - もし2つの数が、{=:link}で等しいとき。
    <br><br>

- コンス
  - 2つの`car`が{equalp:link}であり、かつ、2つの`cdr`が{equalp:link}のとき。
    <br><br>

- 配列
  - 2つの配列が同じ次元数であり、その次元が一致し、
    対応するアクティブな要素が{equalp:link}のとき。
    配列の型は、{specialized}が一致する必要はありません。
    例えば文字列と一般配列において
    同じ文字が含まれているときは{equalp:link}が成り立ちます。
    {equalp:link}は文字列を要素対要素で比較し、
    各文字の大文字小文字を無視するため、
    {equalp:link}で文字列を比較したときは大文字小文字の違いは無視されます。
    <br><br>

- 構造体
  - 2つの構造体`S1`と`S2`が、同じクラスであり、
    `S1`の各スロットの値と`S2`の対応する各スロットの値が
    {equalp:link}において同一のとき。
    <br><br>

- ハッシュテーブル
  - {equalp:link}はハッシュテーブルに降りていき、
    最初に各エントリーの数と`:test`の関数を比較します。
    もしこれらが等しいときは、テーブルのキーを`:test`関数を用いて比較し、
    そのあとでキーに対応する値を{equalp:link}で再帰的に比較します。
    <br><br>

{equalp:link}は、上記で明確に指定されたもの以外の
どんなオブジェクトにも降りては行きません。
次の図は、前のリストを要約した情報です。
加えて、図には{equalp:link}のふるまいの優先順位を載せており、
上に記載されているものの方が下のものより優先順位は高くなります。

|型            |ふるまい                     |
|--------------|-----------------------------|
|number        |{=:link}を使用               |
|character     |{char-equal:link}を使用      |
|cons          |降りて行く                   |
|bit vector    |降りて行く                   |
|string        |降りて行く                   |
|pathname      |{equal:link}と同じ           |
|structure     |降りて行く。上記の記載参照。 |
|他のarray     |降りて行く                   |
|hash table    |降りて行く。上記の記載参照。 |
|他のobject    |{eq:link}を使用              |

Figure 5-13. {equalp:link}のふるまいの要約と優先順位


## {examples}

```lisp
(equalp 'a 'b) =>  false
(equalp 'a 'a) =>  true
(equalp 3 3) =>  true
(equalp 3 3.0) =>  true
(equalp 3.0 3.0) =>  true
(equalp #c(3 -4) #c(3 -4)) =>  true
(equalp #c(3 -4.0) #c(3 -4)) =>  true
(equalp (cons 'a 'b) (cons 'a 'c)) =>  false
(equalp (cons 'a 'b) (cons 'a 'b)) =>  true
(equalp #\A #\A) =>  true
(equalp #\A #\a) =>  true
(equalp "Foo" "Foo") =>  true
(equalp "Foo" (copy-seq "Foo")) =>  true
(equalp "FOO" "foo") =>  true
(setq array1 (make-array 6 :element-type 'integer
                           :initial-contents '(1 1 1 3 5 7))) 
=>  #(1 1 1 3 5 7)
(setq array2 (make-array 8 :element-type 'integer
                           :initial-contents '(1 1 1 3 5 7 2 6)
                           :fill-pointer 6))
=>  #(1 1 1 3 5 7)
(equalp array1 array2) =>  true
(setq vector1 (vector 1 1 1 3 5 7)) =>  #(1 1 1 3 5 7)
(equalp array1 vector1) =>  true 
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{eq:link},
{eql!function:link},
{equal:link},
{=:link},
{string=:link},
{string-equal:link},
{char=:link},
{char-equal:link}


## {notes}

オブジェクトの同一性は、
正しいアルゴリズムによって決められる一意性といった考え方はありません。
この同一性の関数が適切に使われる場合というのは、
ただ特定のプログラムで必要になったときの文脈でのみ判断できます。
これらの関数はどんな型の引数でも取れますし、
それらの関数名は非常に一般的に聞こえますが、
{equal:link}と{equalp:link}は全てのアプリケーションにおいて
適切に使えるものではありません。

@end

