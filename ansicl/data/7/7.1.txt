;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  7.1 オブジェクトの作成と初期化
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.1
@type: text

ジェネリック関数{make-instance:link}は、
クラスの新しいインスタンスを作成し返却します。
最初の引数はクラスか、クラスの名前であり、
残りの引数は{initialization-arguments}リストです。

新しいインスタンスの初期化は、いくつかのステップから成ります。
内容は次のようになります。
指定されなかった{initialization-arguments}の値に対して、
明に指定された{initialization-arguments}とデフォルト値を結びつけるステップ。
{initialization-arguments}の有効性をチェックするステップ。
インスタンスの記憶領域を確保するステップ。
スロットに値を埋めるステップ。
そして追加の初期化を行うためにユーザーが提供したメソッドを実行するステップ。
{make-instance:link}の各ステップはジェネリック関数により実装されているため、
それぞれのステップをカスタマイズする仕組みが提供されています。
加えて、{make-instance:link}自体がジェネリック関数であるため、
自身もカスタマイズできます。

オブジェクトシステムは各ステップに対して、システムで提供されたメソッドを用意しています。
メソッドは初期化全体の手順の標準的な振る舞いを定義したものです。
標準の振る舞いは、下記の4つの簡単な仕組みによって、初期化を制御することができます。

- スロットの{initialization-arguments}としてのシンボルの宣言。
{initialization-arguments}は{defclass:link}のスロットオプションである、
`:initarg`を使うことで宣言できます。
これは、{make-instance:link}の呼び出し時に、
スロットの値を設定するための仕組みとして提供されたものです。

- {initialization-arguments}のデフォルト値フォームの指定。
{initialization-arguments}のデフォルト値フォームは、
{defclass:link}のクラスオプションである`:default-initargs`を使うことで定義できます。
もし{initialization-arguments}が
{make-instance:link}の引数として明に提供されなかった場合、
デフォルト値フォームは{defclass:link}が宣言されたレキシカル環境の中で評価されます。
そして評価された結果の値は、{initialization-arguments}の値として使用されます。

- スロットのデフォルト初期化値フォームの提供。スロットのデフォルト初期化値フォームは、
{defclass:link}のスロットオプション`:initform`を使うことで宣言されます。
もし{make-instance:link}の引数かあるいは`:default-initargs`のデフォルト値にて、
スロットに対応する{initialization-arguments}が与えられていなかった場合、
デフォルト値フォームは{defclass:link}が宣言されたレキシカル環境の中で評価されます。
そして評価された結果の値はスロットに格納されます。
局所スロットの`:initform`フォームは、インスタンスが作成されたとき、
クラスの再定義によりインスタンスを更新するとき、
そしてインスタンスを違うクラスの定義に更新するときに使用されるでしょう。
共有スロットの`:initform`フォームに関しては、
定義のときか、再定義のときに使用されます。

- {initialize-instance:link}と{shared-initialize:link}のメソッド定義。
スロットの値を設定するこれらの振る舞いは、
システムが提供するメソッドで提供されており、
{initialize-instance:link}は、{shared-initialize:link}を呼び出すように実装されています。
ジェネリック関数{shared-initialize:link}は初期化の部分を実装しており、
次の4つの状況で共有されています。
それは、インスタンス作成時、インスタンスの再初期化時、
クラスの再定義によるインスタンスの更新時、
そして違うクラス定義へインスタンスを更新するときです。
システムが提供する{shared-initialize:link}のメソッドは、
スロットの値を更新するための上記の振る舞いを直接実装しているため、
{initialize-instance:link}は単純に{shared-initialize:link}を呼び出すだけとなります。

@index

@end

