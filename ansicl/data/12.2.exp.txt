;;
;;  ANSI Common Lisp 日本語訳
;;  12. 数
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function EXP
;;  Function EXPT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 12.2.exp
@name: exp
@name: expt
@type: function

Function `EXP`, `EXPT`


## {syntax}

`exp` *number* => *result*  
`expt` *base-number* *power-number* => *result*


## {arguments-and-values}

*number* - 数  
*base-number* - 数  
*power-number* - 数  
*result* - 数


## {description}

{exp:link}と{expt:link}は、べき乗を計算します。

{exp:link}は、`e`の*number*乗を返却します。
ただし`e`は自然対数の底です。
{exp:link}にはブランチカットはありません。

{expt:link}は*base-number*の*power-number*乗を返却します。
もし*base-number*が{rational}であり、
かつ*power-number*が整数のとき、
計算は正確に行われ、
返却値はおそらく型{rational!system-class:link}になります。
それ以外のときは、結果は浮動小数の近似になるでしょう。

{expt:link}が{rational}の複素数に対して整数のべき乗を求めるとき、
計算は正確に行われなければならず、
その結果は`(or rational (complex rational))`の型になります。

{expt:link}の結果は、引数が複素数ではないときでさえ、
もし*base-number*が負であり*power-number*が整数ではないときに、
その結果は複素数になれます。
例えば、`(expt -8 1/3)`は`-2`が`-8`の立方根であるとしても、
`-2`を返却することは許されません。
その主な立方根は`#C(1.0 1.73205)`に等しくなるような複素数の近似であり、
`-2`ではありません。

{expt:link}は`b^{x} = e^{x log b}`として定義されます。
この定義は主な返却値として正確です。
{expt:link}の範囲は複素平面全体です。
これを`b`を固定とした`x`の関数としてみたとき、
ブランチカットはありません。
`x`を固定とした`b`の関数としてみたとき、
一般的には負の実軸にそって第2象限へ続くブランチカットが存在します。
この領域は原点を排他します。
定義により`0^0=1`です。
もし`b=0`であり実部`x`が厳密に正であるとき`b^x=0`です。
その他の全ての値`x`に対して`0^x`はエラーです。

*power-number*が整数の`0`のとき、
*base-number*が（どんな型であれ）`0`のときでさえ、
その結果は*base-number*の型の`1`になります。
つまり下記のようになります。

```lisp
(expt x 0) ==  (coerce 1 (type-of x))
```

*power-number*がその他の型のゼロのとき、
その結果もまた`1`になりますが、
その型は{12.1.1.2:ab}に記載されている伝染の規則を適用したあとの
引数の型になります。
ただしひとつ例外があり、*base-number*がゼロであり、
*power-number*が整数の型ではないゼロのときの結果は未定義です。


## {examples}

```lisp
(exp 0) =>  1.0
(exp 1) =>  2.718282
(exp (log 5)) =>  5.0 
(expt 2 8) =>  256
(expt 4 .5) =>  2.0
(expt #c(0 1) 2) =>  -1
(expt #c(2 2) 3) =>  #C(-16 16)
(expt #c(2 2) 4) =>  -64 
```


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{log:link},
{12.1.3.3:ab}


## {notes}

{expt:link}の実装は、
*power-number*の型が{rational!system-class:link}のときと
*power-number*の型が{float!system-class:link}のときで
違うアルゴリズムを使用することが許されます。

下記のロジックでは、`(sqrt (expt x 3))`と` (expt x 3/2)`が
等価ではないことに注意してください。

```lisp
(setq x (exp (/ (* 2 pi #c(0 1)) 3)))         ;exp(2.pi.i/3)
(expt x 3) =>  1 ;丸め誤差を考慮しない
(sqrt (expt x 3)) =>  1 ;丸め誤差を考慮しない
(expt x 3/2) =>  -1 ;丸め誤差を考慮しない
```

@end

