;;
;;  ANSI Common Lisp 日本語訳
;;  3. 評価とコンパイル
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro DEFINE-SYMBOL-MACRO
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 3.8.define-symbol-macro
@name: define-symbol-macro
@type: macro

Macro `DEFINE-SYMBOL-MACRO`


## {syntax}

`define-symbol-macro` *symbol* *expansion*  
=> *symbol*


## {arguments-and-values}

*symbol* - シンボル  
*expansion* - フォーム


## {description}

シンボル*symbol*について、
グローバルに影響するマクロ展開の仕組みを提供します。

*symbol*という名前のシンボルマクロの
展開関数をグローバルに確立します。

シンボルマクロの展開関数は、
ただフォームと環境が適用されたときに
正しい展開を返すことが保証されています。
（特に展開が概念的に、展開関数か環境かその両方かの、
どこに保存されるのかは{implementation-dependent}です）

各グローバル下で参照される*symbol*は
（ただし、同じ名前*symbol*の変数かシンボルマクロの
束縛によってシャドウされていないとき）、
通常のマクロ展開処理が行われます。
{3.1.2.1.1:ab}をご確認ください。
シンボルマクロの展開は、通常のマクロと同様に、
シンボルマクロの参照先と同じレキシカル環境において、
さらにマクロ展開が行われます。

もしこの*symbol*の定義
（ただし、同じ名前*symbol*の変数かシンボルマクロの
束縛によってシャドウされていないとき）のスコープ内で
{special:link}宣言が行われたときの結果は未定義です。

この定義のスコープ内で
{setq:link}を使って*symbol*に値をセットしたときは、
それは{setf:link}を使ったかのように扱われます。
{psetq:link}での*symbol*は、{psetf:link}のように扱われ、
{multiple-value-setq:link}は{setf:link}の{values!accessor:link}のように扱われます。

シンボルマクロの束縛は、
{let:link}と{symbol-macrolet:link}によってシャドウされます。


## {examples}

```lisp
(defvar *things* (list 'alpha 'beta 'gamma)) =>  *THINGS*

(define-symbol-macro thing1 (first *things*)) =>  THING1
(define-symbol-macro thing2 (second *things*)) =>  THING2
(define-symbol-macro thing3 (third *things*)) =>  THING3

thing1 =>  ALPHA
(setq thing1 'ONE) =>  ONE
*things* =>  (ONE BETA GAMMA)
(multiple-value-setq (thing2 thing3) (values 'two 'three)) =>  TWO
thing3 =>  THREE
*things* =>  (ONE TWO THREE)

(list thing2 (let ((thing2 2)) thing2)) =>  (TWO 2)
```


## {affected-by}

なし。


## {exceptional-situations}

*symbol*がすでにグローバル変数として定義されていたときは、
型{program-error:link}のエラーが発生します。


## {see-also}

{symbol-macrolet:link},
{macroexpand:link}


## {notes}

なし。

@end

