;;
;;  ANSI Common Lisp 日本語訳
;;  14. コンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function MAPC
;;  Function MAPCAR
;;  Function MAPCAN
;;  Function MAPL
;;  Function MAPLIST
;;  Function MAPCON
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 14.2.mapc
@name: mapc
@name: mapcar
@name: mapcan
@name: mapl
@name: maplist
@name: mapcon
@type: function

Function `MAPC`, `MAPCAR`, `MAPCAN`, `MAPL`, `MAPLIST`, `MAPCON`

## {syntax}

Syntax:

`mapc` *function* &rest *lists+* => *list-1*  
`mapcar` *function* &rest *lists+* => *result-list*  
`mapcan` *function* &rest *lists+* => *concatenated-results*  
`mapl` *function* &rest *lists+* => *list-1*  
`maplist` *function* &rest *lists+* => *result-list*  
`mapcon` *function* &rest *lists+* => *concatenated-results*


## {arguments-and-values}

*function* - *lists*と同じ数の引数を取る関数指定子  
*lists* - {proper-list}  
*list-1* - 最初の*lists*（{proper-list}である必要があります）  
*result-list* - リスト  
*concatenated-results* - リスト


## {description}

マッピング操作は、
引数の各列からひとつ得たものの集合を、
連続で関数に適用した結果を返却します。
{mapc:link}と{mapl:link}以外は、関数の返却値で構成された結果を返却します。
{mapc:link}と{mapl:link}の場合は、返却値は*lists*の列です。

*function*は、最初はインデックス0番目の全ての要素で呼び出され、
そのあとインデックス1番目の全ての要素で呼ばれ、
以下同様に実行します。
もし*function*がシンボルのときは、
それは{symbol-function:link}が実行されたかのように
関数へ{coerce:link}されます。

{mapcar:link}は、*lists*の連続した要素に対して操作します。
*function*は、各*lists*の最初の要素で適用し、
そのあと各*lists*の二番目の要素で適用し、
それを繰り返します。
繰り返しは最短の*lists*がなくなったときに終了し、
他の*lists*の余分な要素は無視されます。
{mapcar:link}の返却値は、
*function*が連続して呼び出された結果のリストです。

{mapc:link}は{mapcar:link}と似ていますが、
適用された*function*の結果を蓄積しない所が違っています。
*lists*引数が返却されます。

{maplist:link}は{mapcar:link}と似ていますが、
*function*は、*lists*のサブリストを連続して適用するところが違っています。
*function*は、最初は*lists*そのものに適用され、
そのあと各*lists*の`cdr`によって適用され、
さらに各*lists*の`cdr`の`cdr`によって適用され、
それをくり返します。

{mapl:link}は{maplist:link}と似ていますが、
適用された*function*の結果を蓄積しない所が違っています。
*list-1*が返却されます。

{mapcan:link}と{mapcon:link}は、
それぞれ{mapcar:link}と{maplist:link}に似ていますが、
適用した*function*の結果を、
{list!function:link}ではなく{nconc:link}によって
リストに結合するところが違っています。

これは次のような関係であり、

```lisp
(mapcon f x1 ... xn)
  ==  (apply #'nconc (maplist f x1 ... xn))
```

{mapcan:link}と{mapcar:link}の関係に似ています。


## Examples:

```lisp
(mapcar #'car '((1 a) (2 b) (3 c))) =>  (1 2 3) 
(mapcar #'abs '(3 -4 2 -5 -6)) =>  (3 4 2 5 6)
(mapcar #'cons '(a b c) '(1 2 3)) =>  ((A . 1) (B . 2) (C . 3))

(maplist #'append '(1 2 3 4) '(1 2) '(1 2 3)) 
=>  ((1 2 3 4 1 2 1 2 3) (2 3 4 2 2 3)) 
(maplist #'(lambda (x) (cons 'foo x)) '(a b c d))
=>  ((FOO A B C D) (FOO B C D) (FOO C D) (FOO D))
(maplist #'(lambda (x) (if (member (car x) (cdr x)) 0 1)) '(a b a c d b c))
=>  (0 0 1 0 1 1 1)
;もし入力のリストに対応する要素が
;そのリスト内で最後の要素の場合は1

(setq dummy nil) =>  NIL 
(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
       '(1 2 3 4)
       '(a b c d e)
       '(x y z)) =>  (1 2 3 4) 
dummy =>  (1 A X 2 B Y 3 C Z)                   

(setq dummy nil) =>  NIL 
(mapl #'(lambda (x) (push x dummy)) '(1 2 3 4)) =>  (1 2 3 4) 
dummy =>  ((4) (3 4) (2 3 4) (1 2 3 4)) 

(mapcan #'(lambda (x y) (if (null x) nil (list x y)))
         '(nil nil nil d e)
         '(1 2 3 4 5 6)) =>  (D 4 E 5) 
(mapcan #'(lambda (x) (and (numberp x) (list x)))
         '(a 1 b c 3 4 d 5))
=>  (1 3 4 5)
```

この場合は、関数はフィルタの役割を果たします。
これは標準のLispの語句の{mapcan:link}です。

```lisp
(mapcon #'list '(1 2 3 4)) =>  ((1 2 3 4) (2 3 4) (3 4) (4)) 
```


## {affected-by}

なし。


## {exceptional-situations}

*lists*が{proper-list}ではないとき、
型{type-error:link}のエラーを通知する準備をしなければなりません。


## {see-also}

{dolist:link},
{map:link},
{3.6:ab}


## {notes}

なし。

@end

