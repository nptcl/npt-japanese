;;
;;  ANSI Common Lisp 日本語訳
;;  3. 評価とコンパイル
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Symbol LAMBDA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 3.8.lambda!symbol
@name: lambda!symbol
@type: symbol

Symbol `LAMBDA`


## {syntax}

`lambda` *lambda-list* [[*declaration\** `|` *documentation*]] *form\**


## {arguments}

*lambda-list* - {ordinary-lambda-list}  
*declaration* - 宣言式。評価されません。  
*documentation* - 文字列。評価されません。  
*form* - フォーム


## {description}

ラムダ式とはリストであり、
関数名を配置するという特定の文脈下で、
間接的に確立された関数名を参照するのではなく、
直接その振る舞いを定義することで関数を表すことができます。

*documentation*は実際に生成された*function*に対して、
ドキュメント文字を割り当てます。


## {see-also}

{function!special:link},
{documentation:link},
{3.1.3:ab},
{3.1.2.1.2.4:ab},
{3.4.11:ab}


## {notes}

下記のようなラムダフォームは、

```lisp
((lambda lambda-list . body) . arguments)
```

意味的には次のフォームと同等です。

```lisp
(funcall #'(lambda lambda-list . body) . arguments)
```

@end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro LAMBDA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 3.8.lambda!macro
@name: lambda!macro
@type: macro

Macro `LAMBDA`


## {syntax}

`lambda` *lambda-list* [[*declaration\** `|` *documentation*]] *form\** => *function*


## {arguments-and-values}

*lambda-list* - {ordinary-lambda-list}  
*declaration* - 宣言式。評価されません。  
*documentation* - 文字列。評価されません。  
*form* - フォーム  
function - 関数


## {description}

ラムダ式を呼び出すための{function!special:link}の{special-form}の
短縮形を提供します。

```lisp
   (lambda lambda-list [[declaration* | documentation]] form*)
==  (function (lambda lambda-list [[declaration* | documentation]] form*))
==  #'(lambda lambda-list [[declaration* | documentation]] form*)
```


## {examples}

```lisp
(funcall (lambda (x) (+ x 3)) 4) =>  7
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{lambda!symbol:link}（シンボル）


## {notes}

このマクロは下記のように定義できます。

```lisp
(defmacro lambda (&whole form &rest bvl-decls-and-body)
  (declare (ignore bvl-decls-and-body))
  `#',form)
```

@end

