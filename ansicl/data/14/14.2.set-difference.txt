;;
;;  ANSI Common Lisp 日本語訳
;;  14. コンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function SET-DIFFERENCE
;;  Function NSET-DIFFERENCE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 14.2.set-difference
@name: set-difference
@name: nset-difference
@type: function

Function `SET-DIFFERENCE`, `NSET-DIFFERENCE`


## {syntax}

`set-difference` *list-1* *list-2* &key *key* *test* *test-not* => *result-list*  
`nset-difference` *list-1* *list-2* &key *key* *test* *test-not* => *result-list*


## {arguments-and-values}

*list-1* - {proper-list}  
*list-2* - {proper-list}  
*test* - 2つの引数を取り{generalized-boolean}を返却する関数の指定子  
*test-not* - 2つの引数を取り{generalized-boolean}を返却する関数の指定子  
*key* - 1つの引数を取り{generalized-boolean}を返却する関数の指定子、
または{nil!variable:link}  
*result-list* - リスト


## {description}

{set-difference:link}は、*list-2*には現れない、
*list-1*の要素のリストを返却します。

{nset-difference:link}は、{set-difference:link}の破壊的バージョンです。
*list-1*はおそらく破壊されます。

*list-1*のひとつの要素と、*list-2*のひとつの要素からなる、
全ての順序付けされたペアに対して、
`:test`か`:test-not`を使ってテストが満たされるかどうかを決定します。
`:test`か`:test-not`の関数の最初の要素は*list-1*の要素であり、
`:key`関数によって返却されたものです（もし`:key`が指定されたなら）。
二番目の引数は*list-2*の要素であり、
`:key`関数によって返却されたものです（もし`:key`が指定されたなら）。

もし`:key`が与えられたなら、
その引数は、*list-1*か*list-2*の要素です。
`:key`関数は通常与えられた要素の部分を返却します。
もし`:key`が与えられないか、あるいは{nil!variable:link}が指定されたとき、
*list-1*と*list-2*の要素が使われます。

*list-1*の要素は、
*list-2*のどの要素にもマッチしないときのみ、
結果に現れます。

どんな方法で引数の順番を変えたとしても、
結果の要素の順番に反映できる保証はありません。
結果のリストは、適切であれば、
*list-1*か*list-2*のどちらかとセルを共有するか、
あるいは{eq:link}になる可能性があります。


## {examples}

```lisp
(setq lst1 (list "A" "b" "C" "d")
      lst2 (list "a" "B" "C" "d")) =>  ("a" "B" "C" "d")
(set-difference lst1 lst2) =>  ("d" "C" "b" "A")
(set-difference lst1 lst2 :test 'equal) =>  ("b" "A")
(set-difference lst1 lst2 :test #'equalp) =>  NIL 
(nset-difference lst1 lst2 :test #'string=) =>  ("A" "b")
(setq lst1 '(("a" . "b") ("c" . "d") ("e" . "f")))
=>  (("a" . "b") ("c" . "d") ("e" . "f")) 
(setq lst2 '(("c" . "a") ("e" . "b") ("d" . "a")))
=>  (("c" . "a") ("e" . "b") ("d" . "a")) 
(nset-difference lst1 lst2 :test #'string= :key #'cdr)
=>  (("c" . "d") ("e" . "f")) 
lst1 =>  (("a" . "b") ("c" . "d") ("e" . "f")) 
lst2 =>  (("c" . "a") ("e" . "b") ("d" . "a")) 
;; 名前に"c"か"w"を含む全ての食べ物は削除される
(set-difference '("strawberry" "chocolate" "banana"
                 "lemon" "pistachio" "rhubarb")
         '(#\c #\w)
         :test #'(lambda (s c) (find c s)))
=>  ("banana" "rhubarb" "lemon")    ;One possible ordering.
```


## {side-effects}

{nset-difference:link}は*list-1*を破壊するでしょう。


## {affected-by}

なし。


## {exceptional-situations}

*list-1*と*list-2*が{proper-list}ではないとき、
型{type-error:link}のエラーを通知する準備をしなければなりません。


## {see-also}

{3.2.1:ab},
{3.6:ab}


## {notes}

`:test-not`パラメーターは非推奨です。

@end

