;;
;;  ANSI Common Lisp 日本語訳
;;  18. ハッシュテーブル
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro WITH-HASH-TABLE-ITERATOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 18.2.with-hash-table-iterator
@name: with-hash-table-iterator
@type: macro

Macro `WITH-HASH-TABLE-ITERATOR`


## {syntax}

`with-hash-table-iterator` (*name* *hash-table*) *declaration\** *form\**
 => *result\**


## {arguments-and-values}

*name* - {macrolet:link}の最初の引数として適切な名前  
*hash-table* - フォーム。
一度だけ評価され、ハッシュテーブルを生成しなければなりません。  
*declaration* - 宣言式。評価されません。  
*form* - {implicit-progn}  
*result* - *form*の返却値


## {description}

ボディ部のレキシカルスコープ内で
*name*が{macrolet:link}によって定義され、
連続した`(name)`の実行は、
ハッシュテーブルからの要素がひとつひとつ返却されます。
ハッシュテーブルは*hash-table*が一度だけ評価されることによって得られます。

`(name)`の実行は、下記に示す3つの値が返却されます。

1. エントリーが返却されたときに*true*を返す{generalized-boolean}
2. *hash-table*のエントリーのキー
3. *hash-table*のエントリーの値

連続した`(name)`の実行によって
全てのエントリーが返却された後は、
ただひとつだけの値{nil!variable:link}が返却されます。

もし繰り返しの何らかの暗黙的な内部状態が
クロージャーで起動フォームを囲んだ返却値などによって
{with-hash-table-iterator:link}フォームの
動的エクステントの外側で返却されたときに
何が起こるかは指定されていません。

{with-hash-table-iterator:link}はいくつでもネストすることが可能であり、
もっとも内側のボディ部は、
これら全てのマクロが違う名前を持っているようなときは、
確立されたローカルマクロの全てを起動することができます。


## {examples}

下記の関数はどんなハッシュテーブルでも{t!variable:link}を返却し、
もし{with-hash-table-iterator:link}の使用が、
対応する{maphash:link}の使用に合っていないときはエラーが発生します。

```lisp
(defun test-hash-table-iterator (hash-table)
  (let ((all-entries '())
        (generated-entries '())
        (unique (list nil)))
    (maphash #'(lambda (key value) (push (list key value) all-entries))
             hash-table)
    (with-hash-table-iterator (generator-fn hash-table)
      (loop     
        (multiple-value-bind (more? key value) (generator-fn)
          (unless more? (return))
          (unless (eql value (gethash key hash-table unique))
            (error "Key ~S not found for value ~S" key value))
          (push (list key value) generated-entries))))
    (unless (= (length all-entries)
               (length generated-entries)
               (length (union all-entries generated-entries
                              :key #'car :test (hash-table-test hash-table))))
      (error "Generated entries and Maphash entries don't correspond"))
    t))
```

下記のものは{with-hash-table-iterator:link}によって実装された、
適切な{maphash:link}の定義です。

```lisp
(defun maphash (function hash-table)
  (with-hash-table-iterator (next-entry hash-table)
    (loop (multiple-value-bind (more key value) (next-entry)
            (unless more (return nil))
            (funcall function key value)))))
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

{with-hash-table-iterator:link}によって確立された
*name*というローカル関数は、
それが第一返却値として*false*を返却したあとに
呼び出された結果は未定義です。


## {see-also}

{3.6:ab}


## {notes}

なし。

@end

