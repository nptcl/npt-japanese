;;
;;  ANSI Common Lisp 日本語訳
;;  5. データと制御フロー
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro COND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 5.3.cond
@name: cond
@type: macro

Macro `COND`


## {syntax}

cond `{`*clause*`}`\* => *result\**

```
clause ::= (test-form form*) 
```


## {arguments-and-values}

*test-form* - フォーム  
*form* - {implicit-progn}  
*result* - *test-form*が*true*を返却した最初の*clause*にある*form*の値か、
*form*がない*clause*の*test-form*の第一返却値か、
あるいは*test-form*が*true*を返却しなかったときは{nil!variable:link}。


## {description}

{cond:link}は*test-form*に依存した*form*の実行を行います。

*test-form*は、それが*true*と評価されるものが見つかるまで、
引数のリストを順番に一度だけ評価されます。

もし*clause*に*form*がないとき、*test-form*の第一返却値が
{cond:link}フォームの返却値になります。
そうでなければ、*test-form*に関連付けられた*form*が
左から右の順番に{implicit-progn}として評価され、
最後の*form*の返却値が{cond:link}フォームの返却値になります。

いったん*test-form*が*true*を返却したら、
他の*test-form*は評価されません。
もしどの*test-form*も*true*を返却しないときは、
{nil!variable:link}が返却されます。


## {examples}

```lisp
(defun select-options ()
  (cond ((= a 1) (setq a 2))
        ((= a 2) (setq a 3))
        ((and (= a 3) (floor a 2)))
        (t (floor a 3)))) =>  SELECT-OPTIONS
(setq a 1) =>  1
(select-options) =>  2
a =>  2
(select-options) =>  3
a =>  3
(select-options) =>  1
(setq a 5) =>  5
(select-options) =>  1, 2
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{if:link},
{case:link}


## {notes}

なし。

@end

