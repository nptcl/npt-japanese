;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  7.6.6.2 Standard Method-Combination
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.6.6.2
@type: text

method-combinationの`standard`は、{standard-generic-function:link}クラスによって提供されます。
これはmethod-combinationのタイプが指定されなかった場合か、
あるいは組み込みのmethod-combinationタイプである`standard`が指定された場合に使われます。

プライマリメソッドは有効なメソッドのメインとなる動作として定義されます。
補助メソッドは3つあるうちの1つの方法を用いて動作を変更します。
プライマリメソッドは{qualifiers}を持ちません。

補助メソッドは、{qualifiers}`:before`, `:after`, そして`:around`のメソッドです。
method-combinationの`standard`は、メソッドに対して2つ以上の{qualifiers}を許容しません。
もしメソッド定義で複数の{qualifiers}をもつメソッドを定義した場合は、エラーが発せられます。

- `before`メソッドは、ただひとつの{qualifiers}として`:before`キーワードを持ちます。
`before`メソッドは、プライマリメソッドの前に実行されるコードを定義します。

- `after`メソッドは、ただひとつの{qualifiers}として`:after`キーワードを持ちます。
`after`メソッドは、プライマリメソッドの後に実行されるコードを定義します。

- `around`メソッドは、ただひとつの{qualifiers}として`:around`キーワードを持ちます。
`around`メソッドは、他の適用可能なメソッドの代わりとして実行されますが、
いくつかのシャドウされたメソッドを（{call-next-method:link}経由で）呼び出すコードを、
明に含むことができます。

method-combinationの`standard`の意味を次に示します。

- もし`around`メソッドが存在する場合は、最も特定的な`around`メソッドが呼ばれます。
これはジェネリック関数に対して1つか複数の返却値を提供します。

- `around`メソッドのコード内では、次のメソッドを呼ぶための{call-next-method:link}が使用できます。
次のメソッドから戻ったとき、`around`メソッドは返却された値に基づいて、
さらにコードを実行することができます。
もし{call-next-method:link}を使用したときに呼び出せる適用可能なメソッドが存在しなかった場合は、
ジェネリック関数{no-next-method:link}が呼び出されます。
関数{next-method-p:link}は、次のメソッドが存在するかどうかを決定するために使われます。

- もし`around`メソッドが{call-next-method:link}を実行したとき、
次の特定的な`around`メソッドが適用可能であれば呼び出されます。
もし`around`メソッドが存在しないか、
あるいは最も特定的ではない`around`メソッドによって{call-next-method:link}が呼び出された場合は、
次に示すものとして他のメソッドが呼び出されます。

  - 全ての`before`メソッドが`most-specific-first`の順番で呼ばれます。
これらの返却値は無視されます。
もし`before`メソッド内で{call-next-method:link}が使用された場合は、エラーが発せられます。

  - 最も特定的なプライマリメソッドが呼び出されます。
プライマリメソッドのコード内では、
次の特定的なプライマリメソッドを呼び出すための{call-next-method:link}が使用できます。
メソッドから戻ったとき、以前のプライマリメソッドは返却された値に基づいて、
さらにコードを実行することができます。
もし{call-next-method:link}を使用したときに、呼び出せる適用可能なメソッドが存在しなかった場合は、
ジェネリック関数{no-next-method:link}が呼び出されます。
関数{next-method-p:link}は、次のメソッドが存在するかどうかを決定するために使われます。
もし{call-next-method:link}が使われなかった場合は、最も特定的なプライマリメソッドだけが呼び出されます。

  - 全ての`after`メソッドが`most-specific-last`の順番で呼ばれます。
これらの返却値は無視されます。
もし`after`メソッド内で{call-next-method:link}が使用された場合は、エラーが発せられます。

- もし`around`メソッドが呼び出されなかった場合は、
最も特定的なプライマリメソッドが、
1つか複数の値をジェネリック関数の返却値として返却します。
最も特定的ではない`around`メソッドから
{call-next-method:link}の呼び出しによって返却される1つか複数の返却値は、
最も特定的なプライマリメソッドの返却値となります。

method-combinationの`standard`では、適用可能なメソッドが存在しても、
適用可能なプライマリメソッドが存在しなかった場合はエラーが発せられます。

`before`メソッドは`most-specific-first`順にて実行され、
`after`メソッドは`least-specific-first`順に実行されます。
この設計の違いの根拠を、例として次のように示します。
クラス`C1`がスーパークラスである`C2`の動作を、
`before`メソッドと`after`メソッドに追加することで変更することを考えます。
クラス`C2`の振る舞いが`C2`のメソッドとして直接定義するか、
あるいはスーパクラスを継承によるものかに関わらず、
クラス`C1`のインスタンスによって呼び出されるメソッドの相対的な順番には影響しません。
クラス`C1`の`before`メソッドは、クラス`C2`の全てのメソッドの前に実行されます。
クラス`C1`の`after`メソッドは、クラス`C2`の全てのメソッドの後に実行されます。

対称的に、全ての`around`メソッドが実行されるのは、他のメソッドが実行される前です。
このように最も遠い`around`メソッドは、最も特定的なプライマリメソッドの前に実行されます。

もしプライマリメソッドのみが宣言されており、
さらに{call-next-method:link}が使用されなかった場合は、
最も特定的なメソッドのみが実行されます。
つまり最も特定的なメソッドが他の一般的なメソッドをシャドウしたということです。

@end

