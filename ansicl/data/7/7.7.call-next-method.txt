;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Local Function CALL-NEXT-METHOD
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.call-next-method
@name: call-next-method
@type: local-function

Local Function `CALL-NEXT-METHOD`


## {syntax}

`call-next-method` &rest *args* => *result\**


## {arguments-and-values}

*args* - オブジェクト  
*result* - 呼び出したメソッドの返却値


## {description}

関数{call-next-method:link}は、
メソッド定義フォームで定義された
ボディフォーム内（ただしラムダリストは除く）で、
次のメソッドを呼び出すために使用することができます。

もし次のメソッドがないときは、
ジェネリック関数{no-next-method:link}が呼ばれます。

使用するmethod-combinationのタイプによって、
{call-next-method:link}を実行できるメソッドが決まります。
`standard` method-combinationタイプは、
プライマリメソッドと`around`メソッドの中で
{call-next-method:link}の使用が許されます。
{define-method-combination:link}の短縮形によって定義された
method-combinationを使用したジェネリック関数の場合は、
{call-next-method:link}は`around`メソッドでのみ使うことができます。

{call-next-method:link}が引数なしで呼ばれたとき、
現在のメソッドのもともとの引数が次のメソッドの渡されます。
引数のデフォルト値、{setq:link}の使用、
メソッドのパラメーターと同名の変数への再束縛の、
いずれの動作も{call-next-method:link}が呼び出す
メソッドへ渡す値に影響しません。

{call-next-method:link}が引数とともに呼び出されたとき、
次のメソッドはそれらの引数とともに呼ばれます。

{call-next-method:link}が引数とともに呼び出され、
しかしオプション引数が省略されていた場合は、
次のメソッドは、それらのデフォルトの引数で呼ばれます。

関数{call-next-method:link}は、
次のメソッドから返却されたどのような値でも返却します。

関数{call-next-method:link}は、
レキシカルスコープと不定範囲を持っており、
メソッド定義フォームによって定義された
メソッドのボディ部の中でのみ使うことができます。

グローバル環境下で、{call-next-method:link}が`fbound`かどうかは実装依存です。
しかし、再定義と{call-next-method:link}のシャドウについての制限は、
`COMMON-LISP`パッケージにある、
グローバル環境下において`fbound`であるシンボルと同じです。
{call-next-method:link}をメソッド定義フォームの外で
使おうとしたときの結果は未定義です。


## {examples}

なし。


## {affected-by}

{defmethod:link},
{call-method:link},
{define-method-combination:link}


## {exceptional-situations}

{call-next-method:link}に引数が与えられたとき、
次の規則を満たさないときは型{error!condition:link}のエラーが生じます。
{call-next-method:link}によって引数が変更されたとき、
その変更された引数の集合による適用可能なメソッドの集合の順番が、
元のジェネリック関数の引数による適用可能なメソッドの集合の順番と
同一でなければなりません。
最適化によるエラーチェックは可能ですが、
しかし{call-next-method:link}の意味を変えてはいけません。


## {see-also}

{define-method-combination:link},
{defmethod:link},
{next-method-p:link},
{no-next-method:link},
{call-method:link},
{7.6.6:ab},
{7.6.6.2:ab},
{7.6.6.4:ab},


## {notes}

なし。

@end

