;;
;;  ANSI Common Lisp 日本語訳
;;  12. 数
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function MAKE-RANDOM-STATE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 12.2.make-random-state
@name: make-random-state
@type: function

Function `MAKE-RANDOM-STATE`


## {syntax}

`make-random-state` `&optional` *state* => *new-state*


## {arguments-and-values}

*state* - {random-state}か、{nil!variable:link}か、{t!variable:link}。
デフォルトは{nil!variable:link}。  
*new-state* - {random-state}オブジェクト


## {description}

{*random-state*:link}の値として使いやすい
型{random-state:link}の新しいオブジェクトを生成します。

もし*state*が{random-state}オブジェクトのとき、
*new-state*はそのオブジェクトをコピーします。
もし*state*が{nil!variable:link}のとき、
*new-state*は現在の{random-state}をコピーします。
もし*state*が{t!variable:link}のとき、
*new-state*は何とかして初期状態をランダムにした
新しい{random-state}オブジェクトです。


## {examples}

```lisp
(let* ((rs1 (make-random-state nil))
       (rs2 (make-random-state t))
       (rs3 (make-random-state rs2))
       (rs4 nil))
  (list (loop for i from 1 to 10 
              collect (random 100)
              when (= i 5)
               do (setq rs4 (make-random-state)))
        (loop for i from 1 to 10 collect (random 100 rs1))
        (loop for i from 1 to 10 collect (random 100 rs2))
        (loop for i from 1 to 10 collect (random 100 rs3))
        (loop for i from 1 to 10 collect (random 100 rs4))))
=> ((29 25 72 57 55 68 24 35 54 65)
    (29 25 72 57 55 68 24 35 54 65)
    (93 85 53 99 58 62 2 23 23 59)
    (93 85 53 99 58 62 2 23 23 59)
    (68 24 35 54 65 54 55 50 59 49))
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

*state*が{random-state}、{nil!variable:link}、{t!variable:link}のどれでもないときは、
型{type-error:link}のエラーが通知されるべきです。


## {see-also}

{random:link},
{*random-state*:link}


## {notes}

{make-random-state:link}の重要な使い方として、
ひとつのプログラム内で同じ疑似乱数の列を
何度も生成することができます。

@end

