;;
;;  ANSI Common Lisp 日本語訳
;;  6. 繰り返し
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro DO
;;  Macro DO*
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 6.2.do
@name: do
@name: do*
@type: macro

Macro `DO`, `DO*`


## {syntax}

`do` (`{`*var* `|` (*var* [*init-form* [*step-form*]])`}`\*)
 (*end-test-form* *result-form\**) *declaration\**
 `{`*tag* | *statement*`}`\*  
=> *result\**

`do*` (`{`*var* `|` (*var* [*init-form* [*step-form*]])`}`\*)
 (*end-test-form* *result-form\**) *declaration\**
 `{`*tag* | *statement*`}`\*  
=> *result\**


## {arguments-and-values}

*var* - シンボル  
*init-form* - フォーム  
*step-form* - フォーム  
*end-test-form* - フォーム  
*result-form* - {implicit-progn}  
*declaration* - 宣言式。評価されません。  
*tag* - `go`のタグ。評価されません。  
*statement* - {compound-form}。下記の説明に従って評価されます。  
*result* - もし{return:link}か{return-from:link}が実行されたときは、
そのフォームから渡された返却値であり、
それ以外の場合は*result-form*による返却値です。


## {description}

{do:link}は、テスト条件に入っている状態のときに
*statememt*のグループを繰り返します。
{do:link}は任意の数の繰り返し変数*var*を束縛し、
それは繰り返し中に並列に実行されます。
初期値は、繰り返し変数に*init-form*を使うことによって
与えることができます。
*step-form*は、繰り返し中に*var*を
どのように更新して進めるべきかを指定します。
もし*end-test-form*条件が、ボディ部の実行前に合致したとき、
その繰り返しは終了します。
*tag*は*statement*にラベル付けされます。

{do*:link}は正確に{do:link}と似ていますが、
ただ*var*の束縛の進め方が
並列ではなく順番に行われることが違っています。

最初の繰り返し前に、全ての*init-form*が評価され、
各*var*に*init-form*の指定があったものに
それぞれの値を束縛します。
これは束縛であり代入ではありませんので、
もしループが終了したらそれらの変数は古い値に復旧されるでしょう。
{do:link}は、全ての*init-form*は
どんな*var*についても束縛される前に実行されます。
*init-form*は、{do:link}の実行が始まる前の
*var*として見えている束縛を参照することができます。
{do*:link}は、最初の*init-form*が評価されたら、
最初の*var*にその値の束縛が行われ、
2番目の*init-form*が評価されたら、
2番目の*var*にその値が束縛され、
それを繰り返します。
つまり一般的に、`k`番目の*init-form*は、`j`番目（`j` < `k`）の
新しい束縛を参照することができ、
それ以外のとき、`j`番目の*var*は古い値が参照されます。

各繰り返しが始まり、各変数の処理が終わったあと、
*end-test-form*が評価されます。
もし結果が*false*のときは、
{do:link}の（あるいは{do*:link}の）フォームのボディ部が
続けて実行されます。
もし結果が*true*のときは、
*result-form*が{implicit-progn}として順に評価されれ、
それから{do:link}か{do*:link}が返却されます。

各繰り返しが始まり、最初以外の実行のとき、
*var*は次のように更新されます。
全ての*step-form*は、もし指定されていたときは評価され、
それは左から右に行われ、
返却値は対応する*var*に代入されます。
*step-form*を持たない*var*は、代入されません。
{do:link}は、全ての*step-form*が*var*の更新前に評価されます。
*var*への値の代入は、{psetq:link}が使用されたかのように並列で行われます。
全ての*step-form*は*var*が変更される前に評価されるため、
*step-form*は、他の*step-form*の前にあっても
全ての*var*は常に古い値を参照するような状況で評価されます。
{do*:link}は、最初の*step-form*が評価され、
それから最初の*var*にその値が代入され、
そのあと2番目の*step-form*が評価され、
そして2番目の*var*にその値が代入され、
繰り返します。
変数への代入は{setq:link}を使用したかのように順番に行われます。
{do:link}と{do*:link}のどちらも、
全ての*var*を更新したあとで
すでに説明した通り*end-test-form*が評価されて、
そして繰り返しが継続します。

{do:link}の（そして{do*:link}も同様）残りの部分は、
{implicit-tagbody}で構成されます。

*tag*は{do:link}の繰り返し内のボディ部内に出現し、
それはボディ部に{go:link}文の出現によって使用されます
（しかしそのような{go:link}文は、変数定義や*end-test-form*、
*result-form*には現れないでしょう）。
{do:link}のボディ部が終わりに到達したとき、
次の繰り返しのサイクル（各*step-form*の評価の最初）が始まります。

{nil!variable:link}という名前の暗黙の`block`が、
{do:link}と{do*:link}のフォーム全体を囲みます。
{return:link}文は、ループを即座に終了させるために、
どこの地点でも使用することができます。

*init-form*は*var*に関連付けられる初期値です。
もし*init-form*が省略されていたときの
*var*の初期値は{nil!variable:link}です。
もし*declaration*が*var*に指定されていたときは、
*init-form*は*declaration*に一致しなければなりません。

*declaration*は、{do:link}と{do*:link}のボディ部の最初に
配置することができます。
それらは{do:link}と{do*:link}のボディ部のコードと、
{do:link}と{do*:link}の*var*の束縛と、
*step-form*と、*end-test-form*と、*result-form*に適用します。


## {examples}

```lisp
(do ((temp-one 1 (1+ temp-one))
      (temp-two 0 (1- temp-two)))
     ((> (- temp-one temp-two) 5) temp-one)) =>  4

(do ((temp-one 1 (1+ temp-one))
      (temp-two 0 (1+ temp-one)))     
     ((= 3 temp-two) temp-one)) =>  3

(do* ((temp-one 1 (1+ temp-one))
       (temp-two 0 (1+ temp-one)))
      ((= 3 temp-two) temp-one)) =>  2                     

(do ((j 0 (+ j 1)))
    (nil)                       ;永久に実行
  (format t "~%Input ~D:" j)
  (let ((item (read)))
    (if (null item) (return)   ;*itemがNILになるまで処理
        (format t "~&Output ~D: ~S" j item))))
>>  Input 0: banana
>>  Output 0: BANANA
>>  Input 1: (57 boxes)
>>  Output 1: (57 BOXES)
>>  Input 2: NIL
=>  NIL

(setq a-vector (vector 1 nil 3 nil))
(do ((i 0 (+ i 1))     ;a-vectorのnullの要素を全部0に設定
     (n (array-dimension a-vector 0)))
    ((= i n))
  (when (null (aref a-vector i))
    (setf (aref a-vector i) 0))) =>  NIL
a-vector =>  #(1 0 3 0)
```

```
(do ((x e (cdr x))
     (oldx x x))
    ((null x))
  body)
```

上記は、インデックスの変数を並列に代入する例です。
最初の繰り返しでは、
`oldx`の値は、`x`の値が何であれ、
{do:link}に入る前の`x`に設定されます。
続く繰り返しでは、`oldx`には`x`が持つ以前の繰り返しの値が含まれます。

```lisp
(do ((x foo (cdr x))
     (y bar (cdr y))
     (z '() (cons (f (car x) (car y)) z)))
    ((or (null x) (null y))
     (nreverse z)))
```

上記の例は`(mapcar #'f foo bar)`と同じことを実行します。
`x`の次のステップの計算は、
変数が並列で次のステップに計算されるという事実の例になります。
また、繰り返しのボディ部は空です。

```lisp
(defun list-reverse (list)
       (do ((x list (cdr x))
            (y '() (cons (car x) y)))
           ((endp x) y)))
```

次にネストされた繰り返しの例として、
コンスのリストというデータ構造を考えるものを示します。
各コンスの`car`はシンボルのリストであり、
各コンスの`cdr`は対応する値を含む長さが等しいリストです。
そのようなデータ構造は連想リストに似ていますが、
しかし「フレーム」によって分割されるので、
全体の構造はrib-case（胸郭）に似ています
そのようなデータ構造を見る関数を下記に示します。

```lisp
(defun ribcage-lookup (sym ribcage)           
       (do ((r ribcage (cdr r)))
           ((null r) nil)
         (do ((s (caar r) (cdr s))
              (v (cdar r) (cdr v))) 
             ((null s))
           (when (eq (car s) sym)
             (return-from ribcage-lookup (car v)))))) =>  RIBCAGE-LOOKUP
```


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

他の繰り返し関数（{dolist:link}, {dotimes:link}, {loop:link}）と、
より原始的な機能（{tagbody:link}, {go:link}, {block:link},
 {return:link}, {let:link}, {setq:link}）。


## {notes}

もし*end-test-form*が{nil!variable:link}のとき、
テストは決して成功しないでしょう。
これは「永久に実行」という語を提供し、
{do:link}と{do*:link}のボディ部は繰り返し実行されます。
このような無限ループは、
{return:link},
{return-from:link},
{go:link}の外側の脱出,
{throw:link}によって終了させることができます。

{do:link}フォームはより原始的なフォームである、
{block:link}, {return:link}, {let:link},
{loop:link}, {tagbody:link}, {psetq:link}
の語句によって次のように説明できます。

```lisp
(block nil        
  (let ((var1 init1)
        (var2 init2)
        ...
        (varn initn))
    declarations
    (loop (when end-test (return (progn . result)))
          (tagbody . tagbody)
          (psetq var1 step1
                 var2 step2
                 ...
                 varn stepn))))
```

{do*:link}も似ていますが、
{let*:link}と{setq:link}を、
それぞれ{let:link}と{psetq:link}に置き換えたものになります。

@end

