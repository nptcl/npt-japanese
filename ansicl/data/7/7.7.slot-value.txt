;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function SLOT-VALUE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.slot-value
@name: slot-value
@type: function

Function `SLOT-VALUE`


## {syntax}

`slot-value` *object* *slot-name* => *value*


## Arguments and Values:

*object* - オブジェクト  
*name* - シンボル  
*value* - オブジェクト


## {description}

関数{slot-value:link}は、*object*のスロット名*slot-name*の値を返却します。
もしスロット名*slot-name*が存在しないときは{slot-missing:link}が呼ばれます。
もしスロットが`unbound`のときは、{slot-unbound:link}が呼ばれます。

スロットの値を変更するときに、
マクロ{setf:link}の{slot-value:link}が使えます。


## {examples}

```lisp
(defclass foo () 
  ((a :accessor foo-a :initarg :a :initform 1)
   (b :accessor foo-b :initarg :b)
   (c :accessor foo-c :initform 3)))
=>  #<STANDARD-CLASS FOO 244020371>
(setq foo1 (make-instance 'foo :a 'one :b 'two))
=>  #<FOO 36325624>
(slot-value foo1 'a) =>  ONE
(slot-value foo1 'b) =>  TWO
(slot-value foo1 'c) =>  3
(setf (slot-value foo1 'a) 'uno) =>  UNO
(slot-value foo1 'a) =>  UNO
(defmethod foo-method ((x foo))
  (slot-value x 'a))
=>  #<STANDARD-METHOD FOO-METHOD (FOO) 42720573>
(foo-method foo1) =>  UNO
```


## {affected-by}

なし。


## {exceptional-situations}

スロットから読み込むときに、
*object*にはスロット名*slot-name*が存在しないときは、
{slot-missing:link}が次のように呼ばれます。

```lisp
(slot-missing (class-of instance)
              instance
              slot-name
              'slot-value)
```

（もし{slot-missing:link}が起動されたときは、
{slot-value:link}によって第一返却値が返されます。）

スロットに書き込むときに、
*object*にはスロット名*slot-name*が存在しないときは、
{slot-missing:link}が次のように呼ばれます。

```lisp
(slot-missing (class-of instance)
              instance
              slot-name
              'setf
              new-value)
```

（この場合、{slot-missing:link}が返却されたとき、
全ての値は無視されます。）

具体的なふるまいは、*instance*のメタクラスに依存します。
もし*instance*のメタクラスが{standard-class:link}なら、
決してエラーは発生しません。
もし*instance*のメタクラスが{built-in-class:link}なら、
常にエラーが発生します。
もし*instance*が他のメタクラスなら結果は規定されておらず、
状況によってエラーが発生するかもしれませんし、
されないかもしれません。
特にコンディションと構造体についての動作は規定されていません。


## {see-also}

{slot-missing:link},
{slot-unbound:link},
{with-slots:link}


## {notes}

実装は必須ではありませんが、
実装者はMetaobject Protocolで説明されている
関数{slot-value-using-class:link}を使用して
関数{slot-value:link}を実装することが強く推奨されます。

実装者は{slot-value:link}をコンパイル時にインラインに最適化するかもしれません。

@end

