;;
;;  ANSI Common Lisp 日本語訳
;;  24. システム構築
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function COMPILE-FILE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 24.2.compile-file
@name: compile-file
@type: function

Function `COMPILE-FILE`


## {syntax}

`compile-file` *input-file*
 `&key` *output-file* *verbose* *print* *external-format*
 => *output-truename*, *warnings-p*, *failure-p*


## {arguments-and-values}

*input-file* - パス名指定子（デフォルトでは未指定の要素は
{*default-pathname-defaults*:link}の値から取得し埋められます）。  
*output-file* - パス名指定子。デフォルトは{implementation-dependent}。  
*verbose* - {generalized-boolean}。デフォルトは{*compile-verbose*:link}の値。  
*print* - {generalized-boolean}。デフォルトは{*compile-print*:link}の値。  
*external-format* - 外部ファイルフォーマット指定子。デフォルトは`:default`。  
*output-truename* - パス名（出力ファイルの{truename:link}）か、
{nil!variable:link}。  
*warnings-p* - {generalized-boolean}  
*failure-p* - {generalized-boolean}


## {description}

{compile-file:link}は、
*input-file*で指定されたファイルの内容を、
*output-file*によって指定されたファイルの位置へ
{implementation-dependent}のバイナリデータに変換します。

*input-file*で示すファイルはソースファイルでなければなりません。
*output-file*は出力パス名を指定することができます。
コンパイルされたコードを出力する
コンパイルファイルの実際のパス名は、
{compile-file-pathname:link}を呼び出されたかのように計算されます。

もし*input-file*か*output-file*が論理パス名のとき、
それは{translate-logical-pathname:link}が呼び出されたかのように
物理パス名に変換されます。

もし*verbose*が*true*のとき、
{compile-file:link}はコメントのフォーム（例えば先頭にセミコロン） で
メッセージを標準出力に対して
どのようなファイルがコンパイルされたかや、
その他の有益な情報などを印刷します。
もし*verbose*が*false*のときは、そのような情報は印刷されません。

もし*print*が*true*のとき、
コンパイルされるファイル内の
トップレベルフォームについての情報を、
標準出力に印刷します。
どのようなものが印刷されるかの
正確な内容は{implementation-dependent}ですが、
それでも何らかの情報が印刷されます。
もし*print*が{nil!variable:link}のときは
何の情報も印刷されません。

*external-format*は、
ファイルを開くときに使われる外部ファイルフォーマットを指定します。
関数{open:link}をご確認ください。
結果のコンパイルされたファイルは、
改めて外部ファイルフォーマットの指定をせずに
ロードすることができるので、
{compile-file:link}と{load:link}は
このような方法を実現するために協調しなければなりません。
関数{load:link}をご確認ください。

{compile-file:link}は{*readtable*:link}と{*package*:link}に対して、
ファイル処理する前に保持されていた値に束縛します。

{*compile-file-truename*:link}は、
{compile-file:link}によって束縛が行われ、
その内容はコンパイルされているファイルのパス名の`truename`です。

{*compile-file-pathname*:link}は
{compile-file:link}によって束縛が行われ、
その内容は{compile-file:link}の最初の引数と
デフォルト値がマージされたものを示します。
つまり`(pathname (merge-pathnames input-file))`です。

コンパイルされたファイル内に含まれるコンパイルされた関数は、
Lispがそのコンパイルされたファイルをロードしたときに使用できるようになります。
コンパイラーによって処理されたどのような関数定義でも、
それは`#'(lambda ...)`フォームや、
{flet:link}と{labels:link}によって生成されたローカル関数、
{defun:link}フォームなどの結果は、
型{compiled-function:link}のオブジェクトです。

{compile-file:link}の返却値の主値である*output-truename*は、
出力ファイルの`truename`か、
もしファイルが生成できなかったときは{nil!variable:link}です。

2つめの返却値である*warnings-p*は、
コンパイラーによって型{error!condition:link}か
{warning:link}のコンディションが
検出されなかったときは*false*を、
それ以外のときは*true*を返却します。

3つめの返却値である*failure-p*は、
コンパイラーによって型{error!condition:link}か
{warning:link}（{style-warning:link}以外）コンディションが
検出されなかったときは*false*を、
それ以外のときは*true*を返却します。

ファイルコンパイラーによって
どのようにファイルを処理するかについての
一般的な情報は{3.2.3:ab}をご確認ください。

ファイルコンパイラーによってコンパイルされるプログラムは、
ただ外部化可能なオブジェクトのみが含まれます。
そのようなオブジェクトの詳細については{3.2.4:ab}をご確認ください。
どのようにして外部化可能なオブジェクトの集合を拡張するかについては
関数{make-load-form:link}と{3.2.4.4:ab}をご確認ください。


## {examples}

なし。


## {affected-by}

{*error-output*:link},
{*standard-output*:link},
{*compile-verbose*:link},
{*compile-print*:link}

コンピューターのファイルシステム


## {exceptional-situations}

コンパイル処理中のエラーの検出についての情報は、
{3.2.5:ab}をご確認ください。

もし`(wild-pathname-p input-file)`が*true*のとき、
型{file-error:link}のエラーが通知することができます。

入力としてソースファイルをオープンしようとしたか、
あるいは出力としてコンパイルされるファイルをオープンしようとしたときに
失敗したときは、
型{file-error:link}のエラーが通知されます。


## {see-also}

{compile:link},
{declare:link},
{eval-when:link},
{pathname!system-class:link},
{logical-pathname!system-class:link},
{20.1:ab},
{19.1.2:ab}


## {notes}

なし。

@end

