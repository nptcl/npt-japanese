;;
;;  ANSI Common Lisp 日本語訳
;;  9. コンディション
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro HANDLER-BIND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 9.2.handler-bind
@name: handler-bind
@type: macro

Macro `HANDLER-BIND`


## {syntax}

`handler-bind` (`{`*binding*`}`\*) *form\** => *result\**

```
binding::= (type handler) 
```


## {arguments-and-values}

*type* - 型指定子  
*handler* - フォーム。評価されたら*handler-function*を生成します。  
*handler-function* - ひとつの引数を取る関数指定子  
*form* - {implicit-progn}  
*result* - *form*による返却値


## {description}

*handler*が束縛されている効果がある
動的環境の下で*form*を評価します。

各*handler*は評価されて*handler-function*にならなければならず、
*form*を評価している間は、
指定された*type*のコンディションが捕捉されたときに
その関数が使用されます
この関数はひとつの引数を受け取れなければならず、
その引数には通知されたコンディションが渡されます。

もし複数の*handler*の束縛が指定されたとき、
*handler*の束縛は、順番に上から下へ
（視覚的に{typecase:link}に似た方法で）
マッチするものを探します。
もし適切な型が見つかったときは、
その関連するハンドラーは、
これらの*handler*の束縛が見えないような動的環境下で
（再帰的なエラーを回避するため）実行されます。
もし*handler*が下がると、他に続く*handler*を探します。

もし適切な*handler*が無かったときは、
動的に囲まれた部分から他のハンドラを探します。
もし外側にも*handler*がなかったときは、
{signal:link}は戻るか、あるいは{error!function:link}はデバッガーに入ります。


## {examples}

下記のコードは、もしボディ部で`unbound`な変数のエラーが通知されたら
（そしてハンドラーの介入が無かったら）、
最初の関数が呼ばれます。

```lisp
(handler-bind ((unbound-variable #'(lambda ...))
               (error #'(lambda ...)))
  ...)
```

もしそれ以外の何らかのエラーが通知されたら、
二番目の関数が呼び出されます。
いずれの場合も、関連する関数のコードを実行している間委は、
どちらのハンドラーもアクティブになりません。

```lisp
(defun trap-error-handler (condition)
  (format *error-output* "~&~A~&" condition)
  (throw 'trap-errors nil))

(defmacro trap-errors (&rest forms)
  `(catch 'trap-errors
     (handler-bind ((error #'trap-error-handler))
       ,@forms)))

(list (trap-errors (signal "Foo.") 1)
      (trap-errors (error  "Bar.") 2)
      (+ 1 2))
>>  Bar.
=>  (1 NIL 3)
```


`"FOO"`は印刷されませんが、
これは{signal:link}によって{simple-condition:link}を通知したためであり、
型{error!condition:link}ではないため、
`trap-errors`によって用意された{error!condition:link}のハンドラーが
トリガーされないのです。


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{handler-case:link}


## {notes}

なし。

@end

