;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Macro DEFCLASS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.defclass
@name: defclass
@type: macro

Macro `DEFCLASS`


## {syntax}

`defclass` *class-name* (*superclass-name\**) (*slot-specifier\**) [[class-option]]
 => *new-class*

```
slot-specifier ::= slot-name | (slot-name [[slot-option]])
slot-name ::= symbol
slot-option ::= {:reader reader-function-name}* |
                {:writer writer-function-name}* |
                {:accessor reader-function-name}* |
                {:initarg initarg-name}* |
                {:initform form} |
                {:type type-specifier} |
                {:documentation string}
function-name ::= {symbol | (setf symbol)}
class-option ::= (:default-initargs . initarg-list) |
                 (:documentation string) |
                 (:metaclass class-name)
```

## {arguments-and-values}

*class-name* - `nil`ではないシンボル  
*superclass-name* - `nil`ではないシンボル  
*slot-name* - シンボル。 
  引数*slot-name*は、変数名として使用できる構文として有効なシンボルです。  
*reader-function-name* - `nil`ではないシンボル。
  `:reader`はひとつのスロットに複数指定できます。  
*writer-function-name* - ジェネリック関数名。
  `:reader`はひとつのスロットに複数指定できます。  
*accessor-function-name* - `nil`ではないシンボル。
  `:accessor`はひとつのスロットに複数指定できます。  
*allocation-type* - `(member :instance :class)`。
  ひとつのスロットに最大ひとつの指定ができます。  
*initarg-name* - シンボル。
  `:initarg`はひとつのスロットに対して複数指定できます。  
*form* - フォーム。
  `:initform`はひとつのスロットに最大ひとつの指定ができます。  
*type-specifier* - {type-specifier}。
  `:type`はひとつのスロットに最大ひとつの指定ができます。  
*class-option* - クラス全体か、全てのクラスのスロットを示します。  
*initarg-list* - 名前とデフォルトの初期化値のフォームを
  交互に並べた{initialization-arguments}のリストです。
  `:default-initargs`は最大ひとつの指定ができます。  
*class-name* - `nil`ではないシンボル。`:metaclass`は最大ひとつの指定ができます。  
*new-class* - 新しいクラスのオブジェクト  


## {description}

マクロ{defclass:link}は、新しい名前の付いたクラスを定義します。
その結果として新しいクラスオブジェクトが返却されます。

{defclass:link}の構文は、
スロットの{initialization-arguments}を指定するオプション、
スロットのデフォルト初期化値を指定するオプション、
そしてスロットの値を読み書きするためのジェネリック関数のメソッドを
自動的に生成するようなオプションを提供します。
デフォルトではリーダおよびライタ関数は定義されていませんので、
その生成は明示的に要求する必要があります。
ただし、スロットは常に{slot-value:link}を使用してアクセスすることができます。

新しいクラスを定義すると、同じ名前の型も定義されます。
式`(typep object class-name)`は、
引数*object*のクラスが*class-name*自身の名前のクラスであるか、
あるいはクラス*class-name*のサブクラスであるならば、*true*を返します。
クラスオブジェクトは{type-specifier}として使われることができます。
したがって`(typep object class)`は、
*object*のクラスが、クラス自体か、
クラスのサブクラスである場合に*true*を返します。

引数の*class-name*は、新しいクラスの適切な名前を指定します。
もし同名のクラスが存在しており、
そのクラスが{standard-class:link}のインスタンスであり、
さらに{defclass:link}フォームによる新しいクラスの定義が、
{standard-class:link}クラスのクラスで指定されていた場合、
既存のクラスは再定義され、
そのクラス（サブクラスも含む）のインスタンスは、
それらが次にアクセスされたときに
新しい定義へと更新されます。
詳細は{4.3.6:ab}を参照。

引数*superclass-name*は、新しいクラスの{direct-superclasses}を指定します。
もしスーパークラスのリストが空のとき、
スーパークラスはメタクラスによって異なるデフォルト値になりますが、
{standard-class:link}のデフォルトは{standard-object:link}です。

新しいクラスは、各{direct-superclasses}と、
それら各々の{direct-superclasses}の繋がりによって、
スロットとメソッドが継承されます。

スロットオプションは下記のものが使用可能です。

- スロットオプションの`:reader`は、
スロットの値を読み込むための
*reader-function-name*という名前のジェネリック関数と、
{qualifiers}がないメソッドをを定義します。
- スロットオプションの`:writer`は、
スロットの値を書き込むための
*writer-function-name*という名前のジェネリック関数と、
{qualifiers}がないメソッドをを定義します。
- スロットオプションの`:accessor`は、
スロットの値を読み込むための
*accessor-function-name*という名前のジェネリック関数と、
{qualifiers}がないメソッドをを定義します。
さらに、スロットの値を{setf:link}を用いて修正するための
`(setf accessor-function-name)`という名前のジェネリック関数と、
{qualifiers}がないメソッドをを定義します。
- スロットオプションの`:allocation`は、
割り当てられたスロットが、どこのストレージを使用するかを指定します。
スロットのストレージは、各インスタンスか、
クラスオブジェクト自身に配置することができます。
引数`allocation-type`の値は、
`:instance`キーワードか、`:class`キーワードのどちらかです。
もし`:allocation`スロットオプションが指定されなかったときは、
`:allocation :instance`が指定されたと同じ効果になります。
  - *allocation-type*が`:instance`のとき、
    名前が*slot-name*の局所スロットは、
    クラスのそれぞれのインスタンスに配置されます。
  - *allocation-type*が`:class`のとき、指定された名前の共有スロットは、
    {defclass:link}フォームによって生成されたクラスオブジェクトに配置されます。
    このスロットの値は、そのクラスの全てのインスタンスによって共有されます。
    もしクラス`C1`に共有スロットがあるとき、
    `C1`のサブクラス`C2`はこのひとつのスロットが共有されるでしょう。
    ただし`C2`の{defclass:link}フォームで同名のスロットが
	指定された場合は共有されません。
    さらに、`C2`の{class-precedence-list}を見て、
    `C2`のスーパークラスのうちの`C1`より先行しているものがあり、
    そのクラスが同名のスロットを定義していた場合でも、
    スロットの共有は行われません。
- スロットオプション`:initform`は、デフォルト初期値のフォームであり、
  スロットの初期値として使用されます。
  このフォームは、スロットを初期化するときに毎回評価されます。
  このフォームが評価されるときの{lexical-environment}は、
  {defclass:link}フォームが評価されたときのものになります。
  {lexical-environment}は、変数と関数両方を参照することに注意してください。
  局所スロットでは、{dynamic-environment}は
  {make-instance:link}が呼ばれた場所であり、
  共有スロットでは、{defclass:link}が評価された場所です。
  詳細は{7.1:ab}をご確認ください。
  - どの処理系でも、{defclass:link}の構文を`(slot-name :initform form)`から
    省略して`(slot-name form)`にすることは許されません。
- スロットオプション`:initarg`は、
  {initialization-arguments}の名前を*initarg-name*で宣言し、
  そのスロットが{initialization-arguments}で初期化されるように指定します。
  もし{initialize-instance:link}呼び出し時に
  {initialization-arguments}が値を持っているときは、
  そのスロットに値が格納され、
  そのスロットに`:initform`オプションがある場合は評価されません。
  {initialization-arguments}にスロットの値がないときは、
  そのスロットは、`:initform`オプションが指定されてるとき、
  その内容に従って初期化されます。
- スロットオプション`:type`は、
  スロットの内容が常に指定された型であることを指定します。
  これは、このクラスのオブジェクトが適用できるリーダーのジェネリック関数の
  返却値の型を宣言する効果があります。
  そのスロットの型に違反した値を保存しようとしたときの結果は未定義です。
  スロットオプション`:type`は、{7.5.3:ab}で詳しく説明しています。
- スロットオプション`:documentation`は、
  スロットに、ドキュメント文字を提供します。
  `:documentation`はひとつのスロットに、最大ひとつ指定できます。

各クラスオプションは、クラス全体の設定です。  
クラスオプションは下記のものが使用可能です。

- クラスオプション`:default-initargs`は、
  名前とデフォルトの初期化値のフォームを交互に並べた
  {initialization-arguments}のリストによって続けられます。
  もし、これらの{initialization-arguments}のどれかが、
  {make-instance:link}に与えられた{initialization-arguments}リストに現れない場合、
  対応するデフォルト初期値フォームが評価され、
  その{initialization-arguments}名とフォームの値が
  {initialization-arguments}リストの最後に追加されてからインスタンスが生成されます。
  詳しくは{7.1:ab}をご確認ください。
  デフォルト初期値フォームは、使用されるたびに評価されます。
  評価されるときの{lexical-environment}は、
  {defclass:link}フォームが評価されたときのものです。
  {dynamic-environment}は、{make-instance:link}が呼ばれたときのものです。
  もしクラスオプション`:default-initargs`に
  {initialization-arguments}名が複数現れたときは、
  エラーが発生します。
- クラスオプション`:documentation`は、
  クラスオブジェクトにドキュメント文字を、
  種別{type!symbol:link}で、*class-name*に割り当てます。
  `:documentation`は、最大ひとつ指定できます。
- クラスオプション`:metaclass`は、
  定義するクラスのインスタンスが、
  システムが提供するデフォルトのもの({standard-class:link}のクラス)とは
  異なるメタクラスを持つことを指定するために使われます。

標準クラスにおいては、{defclass:link}は下記のルールに注意してください。

- {defclass:link}フォームによってクラスが評価される前に、
  そのクラスのスーパークラスが定義されている必要はありません。
- あるクラスの全てのスーパークラスは、
  そのクラスのインスタンスが使用される前には定義されていなければなりません。
- {defmethod:link}フォームで
  {parameter-specializer}として使用される前には、
  そのクラスは定義されていなければなりません。

オブジェクトシステムは、これらのルールに従わない場合にも
対応できるように拡張することが可能です。

いくつかのスロットは、
スーパークラスのクラスによって継承され、いくつかのものは隠蔽され、
あるいは局所スロットの定義によって変更されます。
クラスオプションは、`:default-initargs`以外継承されません。
スロットとスロットオプションがどのように継承されるかの詳しい説明は、
{7.5.3:ab}をご確認ください。

{defclass:link}のオプションは拡張できます。
すべての実装は、自身が実装していない
クラスオプションやスロットオプションを見た場合は、
エラーを通知することが要求されています。

複数のreader, writer, accessorを指定したり、
あるスロットに複数の{initialization-arguments}を指定するのは正しいです。
その他のスロットオプションが
ひとつのスロットの定義に複数指定することはできませんので、
エラーが発生します。

もし、あるスロットにreader, writer, accessorが指定されていないとき、
そのスロットはただ{slot-value:link}によってのみアクセスできます。

もし{defclass:link}フォームがトップレベルに現れたとき、
コンパイラーはクラス名を有効な型の名前であると認識し、
後続の宣言（たとえば{deftype:link}）や、
{defmethod:link}の{parameter-specializer}、
また{defclass:link}の`:metaclass`オプションでも使用できるようにしなければならない。
コンパイラーは、{find-class:link}の環境の引数に、
マクロの環境パラメーターで受け取った値を指定したときは、
クラスの定義を返却できるようにしなければならない。


## {examples}

なし。


## {affected-by}

なし。


## {exceptional-situations}

もしスロットの名前に重複があった場合は、
型{program-error:link}のエラーが発生します。

もし、クラスオプション`:default-initargs`に
{initialization-arguments}の名前が複数現れたときは、
型{program-error:link}のエラーが発生します。

もし、スロットオプション
`:allocation`, `:initform`, `:type`, `:documentation`が
ひとつのスロットの定義に複数現れたときは、
型{program-error:link}のエラーが発生します。

すべての実装は、自身が実装していない
クラスオプションやスロットオプションを見た場合は、
型{program-error:link}のエラーが通知することを要求されています。


## {see-also}

{documentation:link},
{initialize-instance:link},
{make-instance:link},
{slot-value:link},
{4.3:ab},
{4.3.4:ab},
{4.3.6:ab},
{4.3.5:ab},
{7.1:ab}


## {notes}

なし。

@end

