;;
;;  ANSI Common Lisp 日本語訳
;;  9. コンディション
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function BREAK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 9.2.break
@name: break
@type: function

Function `BREAK`


## {syntax}

`break` `&optional` *format-control* `&rest` *format-arguments*
 => {nil!variable:link}


## {arguments-and-values}

*format-control* - {format-control}。デフォルトは{implementation-dependent}。  
*format-arguments* - {format-arguments}


## {description}

{break:link}は、*format-control*と*format-arguments*を`format`で出力し、
そのあとプログラムによるエラー捕捉の機能による
割り込みの可能性を一切許さずに
直接デバッガーに入ります。

もし{continue!restart:link} `restart`がデバッガー内で使用されたときは、
何の異常状態の回復処理を行わずに
{break:link}は即座に{nil!variable:link}を返却します。

{break:link}はデバッガーに入ろうとする前に
{*debugger-hook*:link}に{nil!variable:link}を束縛します。


## {examples}

```lisp
(break "You got here with arguments: ~:S." '(FOO 37 A))
>>  BREAK: You got here with these arguments: FOO, 37, A.
>>  To continue, type :CONTINUE followed by an option number:
>>   1: Return from BREAK.
>>   2: Top level.
>>  Debug> :CONTINUE 1
>>  Return from BREAK.
=>  NIL
```

 
## {side-effects}

デバッガーに入ります。


## {affected-by}

{*debug-io*:link}


## {exceptional-situations}

なし。


## {see-also}

{error!function:link},
{invoke-debugger:link}


## {notes}

{break:link}は、エラーの通知を使用せず、
プログラムの「ブレークポイント」として
一時的にデバッグに入りたいときに使われます。
このような理由から、{break:link}は{cerror:link}が取るような
*continue-format-control*引数を受け取りません。
この点と、コンディションの捕捉によって割り込みが生じるという可能性がない点が、
{break:link}と{cerror:link}間のプログラムに見える違いです。

{break:link}と{cerror:link}のユーザーインターフェイスの外観は、
実装が必要とするインターフェイスにしたがって、
より大きく変えてしまっても許されます。
例えば、{break:link}は従来のデバッガーではなく
Lispのread-eval-print loopに入ってしまっても許されます。

{break:link}は下記のように定義できます。

```lisp
(defun break (&optional (format-control "Break") &rest format-arguments)
  (with-simple-restart (continue "Return from BREAK.")
    (let ((*debugger-hook* nil))
      (invoke-debugger
          (make-condition 'simple-condition
                          :format-control format-control
                          :format-arguments format-arguments))))
  nil)
```

@end

