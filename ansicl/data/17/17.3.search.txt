;;
;;  ANSI Common Lisp 日本語訳
;;  17. シーケンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function SEARCH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 17.3.search
@name: search
@type: function

Function `SEARCH`


## {syntax}

`search` *sequence-1* *sequence-2*
 &key *from-end* *test* *test-not* *key* *start1* *start2* *end1* *end2*  
=> *position*


## {arguments-and-values}

*sequence-1* - {proper-sequence}  
*sequence-2* - {proper-sequence}  
*from-end* - {generalized-boolean}、デフォルトは*false*  
*test* - 2つの引数を取り{generalized-boolean}を返却する関数の指定子  
*test-not* - 2つの引数を取り{generalized-boolean}を返却する関数の指定子  
*key* - 1つの引数を取る関数の指定子、または{nil!variable:link}  
*start1*, *end1* - *sequence-1*の{bounding-index-designators}。
デフォルトは*start1*, *end1*それぞれ`0`と{nil!variable:link}。  
*start2*, *end2* - *sequence-2*の{bounding-index-designators}。
デフォルトは*start2*, *end2*それぞれ`0`と{nil!variable:link}。  
*position* - *sequence-2*の{bounding-index}か、{nil!variable:link}


## {description}

*sequence-2*のサブシーケンスと*sequence-1*がマッチする場所を探します。

実装は、*sequence-2*をどのような順番で検索するか選べます。
テストの回数を保証することはできません。
例えば、各*start*、*end*に値があるとき、
シーケンスは実際には右から左ではなく、
左から右に検索されるかもしれません
（ただしどちらの場合でも、右側にマッチする
サブシーケンスが返却されます）。
もし検索が成功したときは、{search:link}は、
*from-end*に応じて、*sequence-2*の左端または右端にマッチする
サブシーケンスの最初の要素のオフセットを返却します。
それ以外の場合は、{nil!variable:link}を返却します。

もし*from-end*が*true*のときは、
もっとも右側にマッチしたサブシーケンスの、
左端の要素のインデックスを返却します。


## {examples}

```lisp
(search "dog" "it's a dog's life") =>  7
(search '(0 1) '(2 4 6 1 3 5) :key #'oddp) =>  2
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{3.6:ab}


## {notes}

`:test-not`パラメーターは非推奨です。

@end

