;;
;;  ANSI Common Lisp 日本語訳
;;  7. オブジェクト
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Standard Generic Function SLOT-MISSING
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 7.7.slot-missing
@name: slot-missing
@type: standard-generic-function

Standard Generic Function `SLOT-MISSING`


## {syntax}

`slot-missing` *class* *object* *slot-name* *operation* &optional *new-value*
=> *result\**


## {method-signatures}

`slot-missing` (*class* {t!system-class:link})
*object* *slot-name* *operation* &optional *new-value*


## {arguments-and-values}

*class* - *object*のクラス  
*object* - オブジェクト  
*slot-name* - シンボル（おそらくはスロットの名前）  
*operation* - 次のどれかのシンボル、
{setf:link}, {slot-boundp:link}, {slot-makunbound:link}, {slot-value:link}.  
*new-value* - オブジェクト  
*result* - オブジェクト


## {description}

ジェネリック関数{slot-missing:link}は、
メタクラスが{standard-class:link}の*object*のスロットに
アクセスしようとしたとき、
スロットの名前*slot-name*がそのクラスに
存在しなかったときに呼び出されます。
標準のメソッドでは、エラーが発生します。

ジェネリック関数{slot-missing:link}は、
プログラマーによって呼び出されることを想定していません。
プログラマーはメソッドを書くことができます。

ジェネリック関数{slot-missing:link}は、
次の関数{slot-value:link}, `(setf slot-value)`,
{slot-boundp:link}, {slot-makunbound:link}の評価中に
呼び出されるかもしれません。
これらの操作は、関数の引数*symbol*に、
それぞれ{slot-value:link}, {setf:link},
{slot-boundp:link}, {slot-makunbound:link}
で対応します。

{slot-missing:link}のオプションの*new-value*引数は、
操作がスロットに値をセットしようとするときに使われます。

もし{slot-missing:link}が値を返却したとき、
その値は次のように扱われます。

- 操作が{setf:link}か{slot-makunbound:link}のときは、
呼び出し側によってどんな返却値でも無視されます。

- 操作が{slot-value:link}のときは、
呼び出し側によって第一返却値が使われ、
他の全ての値は無視されます。

- 操作が{slot-boundp:link}のときは、
メソッドの第一返却値をブール値とされて使用され、
他の全ての値は無視されます。


## {examples}

なし。


## {affected-by}

なし。


## {exceptional-situations}


{slot-missing:link}の標準のメソッドでは、
型{error!condition:link}のエラーが発生します。

## {see-also}

{defclass:link},
{slot-exists-p:link},
{slot-value:link}

## {notes}

引数のセット（インスタンスのクラス*class*を含む）は、
{slot-missing:link}のメタクラスによるメソッドの定義が容易になります。

@end

