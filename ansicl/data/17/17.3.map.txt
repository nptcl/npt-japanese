;;
;;  ANSI Common Lisp 日本語訳
;;  17. シーケンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Function MAP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 17.3.map
@name: map
@type: function

Function `MAP`


## {syntax}

`map` *result-type* *function* &rest *sequences+* => *result*


## {arguments-and-values}

*result-type* - {sequence:link}の{type-specifier}か、{nil!type:link}  
*function* - *sequences*にある複数の引数を取る関数の指定子  
*sequences* - {proper-sequence}  
*result* - もし*result-type*が{nil!type:link}ではない{type-specifier}のときは、
その型のシーケンスです。
その他の場合は（あるいは*result-type*が{nil!type:link}のとき）
{nil!variable:link}です。


## {description}

各シーケンスから得られる引数の連続した集合に対して*function*を適用します。
*function*は最初、すべてのインデックス`0`の要素に対して呼び出され、
それから、すべてのインデックス`1`の要素に対して呼び出され、
それをくり返します。
*result-type*は、返却値のシーケンスの型を示します。

{map:link}は、*result-type*が{nil!type:link}のときは、
{nil!variable:link}を返却します。
それ以外のときは、{map:link}は、
シーケンス`j`番目の要素が各*sequences*のそれぞれの'j'番目の要素に
*function*を適用したものであるようなシーケンスを返却します。
返却値のシーケンスは、
*sequences*の中の最も短いものと同じ長さです。
もし*sequences*の一連の要素を
*function*に適用した結果が、
*result-type*で示された型のシーケンスに
含めることができなかったときの結果は未定義です。

もし*result-type*が{list!system-class:link}のサブタイプの場合、
リストが返却されます。

もし*result-type*が{vector!system-class:link}のサブタイプの場合、
実装が*result-type*を要素の型として決めることができるのであれば、
その要素の型をアップグレードした結果が返却値の配列の要素の型になります。
しかし実装が要素の型を決定できないか、あるいは`*`のときは、
返却値の配列の要素の型は{t!system-class:link}になります。
その他の場合はエラーが発生します。


## {examples}

```lisp
(map 'string #'(lambda (x y)
                 (char "01234567890ABCDEF" (mod (+ x y) 16)))
      '(1 2 3 4)
      '(10 9 8 7)) =>  "AAAA"
(setq seq '("lower" "UPPER" "" "123")) =>  ("lower" "UPPER" "" "123")
(map nil #'nstring-upcase seq) =>  NIL
seq =>  ("LOWER" "UPPER" "" "123")
(map 'list #'- '(1 2 3 4)) =>  (-1 -2 -3 -4)
(map 'string
     #'(lambda (x) (if (oddp x) #\1 #\0))
     '(1 2 3 4)) =>  "1010"
(map '(vector * 4) #'cons "abc" "de") should signal an error
```


## {affected-by}

なし。


## {exceptional-situations}

*result-type*が、
{list!system-class:link}の{recognizable-subtype}でも、
{vector!system-class:link}の{recognizable-subtype}でもないとき、
型{type-error:link}のエラーが発します。

*sequence*が{proper-sequence}でないとき、
型{type-error:link}のエラーを通知する準備をしなければなりません。

*result-type*で指定した要素数と、
*sequences*の最小の長さが違う場合は、
型{type-error:link}のエラーが発します。


## {see-also}

{3.6:ab}


## {notes}

なし。

@end

