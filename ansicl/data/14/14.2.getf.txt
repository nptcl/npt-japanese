;;
;;  ANSI Common Lisp 日本語訳
;;  14. コンス
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  Accessor GETF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@begin: 14.2.getf
@name: getf
@type: Accessor

Accessor `GETF`


## {syntax}

`getf` *plist* *indicator* &optional *default* => *value*  
(`setf` (`getf` *place* *indicator* &optional *default*) *new-value*)


## {arguments-and-values}

*plist* - プロパティリスト  
*place* - {place}、プロパティリストの値  
*indicator* - オブジェクト  
*default* - オブジェクト、デフォルトは{nil!variable:link}  
*value* - オブジェクト  
*new-value* - オブジェクト


## {description}

{getf:link}は、*plist*のプロパティリストから
*indicator*と同一の{property-indicator}のプロパティを探し、
対応するプロパティの値を返却します。
{property-indicator}に対して複数のプロパティがあるときは、
{getf:link}は最初のプロパティを使います。
{property-indicator}に対するプロパティが存在しないときは、
*default*が返却されます。

{getf:link}の{setf:link}は、*place*に保存されているプロパティリストに、
すでに{property-indicator}が存在するときは、
新しいオブジェクトを関連付けます。
もし存在しなかったときは、新しい関連を作成します。
{property-indicator}に対して複数のプロパティがあるときは、
{getf:link}の{setf:link}は最初のプロパティに*new-value*を関連付けます。
{getf:link}フォームを{setf:link}の{place}で使うとき、
引数*default*が通常の左から右へ評価されるルールに従って評価され、
*value*は無視されます。

{getf:link}の{setf:link}は、
*place*自身の値を書き込むのか、
*place*に保存されているリスト構造の`car`と`cdr`の
どの部分でも修正することが許されます。


## Examples:

```lisp
(setq x '()) =>  NIL
(getf x 'prop1) =>  NIL
(getf x 'prop1 7) =>  7
(getf x 'prop1) =>  NIL
(setf (getf x 'prop1) 'val1) =>  VAL1
(eq (getf x 'prop1) 'val1) =>  true
(getf x 'prop1) =>  VAL1
(getf x 'prop1 7) =>  VAL1
x =>  (PROP1 VAL1)

;; この例は実装による変化が許されている
(setq foo (list 'a 'b 'c 'd 'e 'f)) =>  (A B C D E F)
(setq bar (cddr foo)) =>  (C D E F)
(remf foo 'c) =>  true
foo =>  (A B E F)
bar
=>  (C D E F)
OR=>  (C)
OR=>  (NIL)
OR=>  (C NIL)
OR=>  (C D)
```


## {side-effects}

なし。


## {affected-by}

なし。


## {exceptional-situations}

なし。


## {see-also}

{get:link},
{get-properties:link},
{setf:link},
{5.1.2.2:ab}


## {notes}

{getf:link}を使用した場合、
プロパティフォームの不在と
デフォルト値の区別をつけることができません。
{get-properties:link}をご確認ください。

{setf:link}の状況下で、
{getf:link}の*default*引数を指定することは、
あまり興味が持たれません。
これが重要になるのは、{push:link}や{incf:link}のようなマクロであり、
*place*引数で読み込みと書き込みの両方が求められるときです
そのような文脈において、*default*引数は、
読み込みの状況によって供給され、
それは書き込む状況によっても同様に
構文として有効でなければなりません。
例えば下記の通り。

```lisp
(let ((plist '()))
  (incf (getf plist 'count 0))
  plist) =>  (COUNT 1)
```

@end

